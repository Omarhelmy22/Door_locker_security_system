
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00003448  000034dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000fc  008000fc  00003578  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00003578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012be  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000997b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a866  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <main>
      8a:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Create_system_password>:
}orders_from_HMI_ECU;

/*
 * function to get values from keypad and show '*' in the lcd
 * */
void Create_system_password(uint8 pass[], uint8 repass[]){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	ee 97       	sbiw	r28, 0x3e	; 62
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	9c af       	std	Y+60, r25	; 0x3c
     b60:	8b af       	std	Y+59, r24	; 0x3b
     b62:	7e af       	std	Y+62, r23	; 0x3e
     b64:	6d af       	std	Y+61, r22	; 0x3d
	LCD_clearScreen();
     b66:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a8 e4       	ldi	r26, 0x48	; 72
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	8d ab       	std	Y+53, r24	; 0x35
     b74:	9e ab       	std	Y+54, r25	; 0x36
     b76:	af ab       	std	Y+55, r26	; 0x37
     b78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	6d a9       	ldd	r22, Y+53	; 0x35
     b7c:	7e a9       	ldd	r23, Y+54	; 0x36
     b7e:	8f a9       	ldd	r24, Y+55	; 0x37
     b80:	98 ad       	ldd	r25, Y+56	; 0x38
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a ef       	ldi	r20, 0xFA	; 250
     b88:	54 e4       	ldi	r21, 0x44	; 68
     b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	89 ab       	std	Y+49, r24	; 0x31
     b94:	9a ab       	std	Y+50, r25	; 0x32
     b96:	ab ab       	std	Y+51, r26	; 0x33
     b98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     b9a:	69 a9       	ldd	r22, Y+49	; 0x31
     b9c:	7a a9       	ldd	r23, Y+50	; 0x32
     b9e:	8b a9       	ldd	r24, Y+51	; 0x33
     ba0:	9c a9       	ldd	r25, Y+52	; 0x34
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <Create_system_password+0x76>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	98 ab       	std	Y+48, r25	; 0x30
     bb8:	8f a7       	std	Y+47, r24	; 0x2f
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <Create_system_password+0xf4>
	else if (__tmp > 65535)
     bbc:	69 a9       	ldd	r22, Y+49	; 0x31
     bbe:	7a a9       	ldd	r23, Y+50	; 0x32
     bc0:	8b a9       	ldd	r24, Y+51	; 0x33
     bc2:	9c a9       	ldd	r25, Y+52	; 0x34
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <Create_system_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	6d a9       	ldd	r22, Y+53	; 0x35
     bd6:	7e a9       	ldd	r23, Y+54	; 0x36
     bd8:	8f a9       	ldd	r24, Y+55	; 0x37
     bda:	98 ad       	ldd	r25, Y+56	; 0x38
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	98 ab       	std	Y+48, r25	; 0x30
     bfa:	8f a7       	std	Y+47, r24	; 0x2f
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <Create_system_password+0xd6>
     bfe:	88 ec       	ldi	r24, 0xC8	; 200
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9e a7       	std	Y+46, r25	; 0x2e
     c04:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	8d a5       	ldd	r24, Y+45	; 0x2d
     c08:	9e a5       	ldd	r25, Y+46	; 0x2e
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <Create_system_password+0xc4>
     c0e:	9e a7       	std	Y+46, r25	; 0x2e
     c10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8f a5       	ldd	r24, Y+47	; 0x2f
     c14:	98 a9       	ldd	r25, Y+48	; 0x30
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	98 ab       	std	Y+48, r25	; 0x30
     c1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1e:	98 a9       	ldd	r25, Y+48	; 0x30
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <Create_system_password+0xb8>
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <Create_system_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	69 a9       	ldd	r22, Y+49	; 0x31
     c28:	7a a9       	ldd	r23, Y+50	; 0x32
     c2a:	8b a9       	ldd	r24, Y+51	; 0x33
     c2c:	9c a9       	ldd	r25, Y+52	; 0x34
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	98 ab       	std	Y+48, r25	; 0x30
     c38:	8f a7       	std	Y+47, r24	; 0x2f
     c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c3c:	98 a9       	ldd	r25, Y+48	; 0x30
     c3e:	9c a7       	std	Y+44, r25	; 0x2c
     c40:	8b a7       	std	Y+43, r24	; 0x2b
     c42:	8b a5       	ldd	r24, Y+43	; 0x2b
     c44:	9c a5       	ldd	r25, Y+44	; 0x2c
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <Create_system_password+0x100>
     c4a:	9c a7       	std	Y+44, r25	; 0x2c
     c4c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	LCD_displayString("Plzz enter Pass: ");
     c4e:	80 e6       	ldi	r24, 0x60	; 96
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
	LCD_moveCursor(1,0);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_moveCursor>
	for(uint8 i =0 ; i<5 ;i++){
     c5e:	1a ae       	std	Y+58, r1	; 0x3a
     c60:	8f c0       	rjmp	.+286    	; 0xd80 <Create_system_password+0x23a>
		do {
			pass[i]=KEYPAD_getPressedKey();
     c62:	8a ad       	ldd	r24, Y+58	; 0x3a
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	8b ad       	ldd	r24, Y+59	; 0x3b
     c6a:	9c ad       	ldd	r25, Y+60	; 0x3c
     c6c:	8c 01       	movw	r16, r24
     c6e:	02 0f       	add	r16, r18
     c70:	13 1f       	adc	r17, r19
     c72:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
     c76:	f8 01       	movw	r30, r16
     c78:	80 83       	st	Z, r24
		}while(pass[i]>9); 									    // to validate that the password not +,-,=
     c7a:	8a ad       	ldd	r24, Y+58	; 0x3a
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	8b ad       	ldd	r24, Y+59	; 0x3b
     c82:	9c ad       	ldd	r25, Y+60	; 0x3c
     c84:	fc 01       	movw	r30, r24
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	80 81       	ld	r24, Z
     c8c:	8a 30       	cpi	r24, 0x0A	; 10
     c8e:	48 f7       	brcc	.-46     	; 0xc62 <Create_system_password+0x11c>
		LCD_displayCharacter('*');
     c90:	8a e2       	ldi	r24, 0x2A	; 42
     c92:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_displayCharacter>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a6 e9       	ldi	r26, 0x96	; 150
     c9c:	b3 e4       	ldi	r27, 0x43	; 67
     c9e:	8f a3       	std	Y+39, r24	; 0x27
     ca0:	98 a7       	std	Y+40, r25	; 0x28
     ca2:	a9 a7       	std	Y+41, r26	; 0x29
     ca4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	6f a1       	ldd	r22, Y+39	; 0x27
     ca8:	78 a5       	ldd	r23, Y+40	; 0x28
     caa:	89 a5       	ldd	r24, Y+41	; 0x29
     cac:	9a a5       	ldd	r25, Y+42	; 0x2a
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a ef       	ldi	r20, 0xFA	; 250
     cb4:	54 e4       	ldi	r21, 0x44	; 68
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8b a3       	std	Y+35, r24	; 0x23
     cc0:	9c a3       	std	Y+36, r25	; 0x24
     cc2:	ad a3       	std	Y+37, r26	; 0x25
     cc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cc6:	6b a1       	ldd	r22, Y+35	; 0x23
     cc8:	7c a1       	ldd	r23, Y+36	; 0x24
     cca:	8d a1       	ldd	r24, Y+37	; 0x25
     ccc:	9e a1       	ldd	r25, Y+38	; 0x26
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e8       	ldi	r20, 0x80	; 128
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cda:	88 23       	and	r24, r24
     cdc:	2c f4       	brge	.+10     	; 0xce8 <Create_system_password+0x1a2>
		__ticks = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9a a3       	std	Y+34, r25	; 0x22
     ce4:	89 a3       	std	Y+33, r24	; 0x21
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <Create_system_password+0x220>
	else if (__tmp > 65535)
     ce8:	6b a1       	ldd	r22, Y+35	; 0x23
     cea:	7c a1       	ldd	r23, Y+36	; 0x24
     cec:	8d a1       	ldd	r24, Y+37	; 0x25
     cee:	9e a1       	ldd	r25, Y+38	; 0x26
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	57 e4       	ldi	r21, 0x47	; 71
     cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	4c f5       	brge	.+82     	; 0xd52 <Create_system_password+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	6f a1       	ldd	r22, Y+39	; 0x27
     d02:	78 a5       	ldd	r23, Y+40	; 0x28
     d04:	89 a5       	ldd	r24, Y+41	; 0x29
     d06:	9a a5       	ldd	r25, Y+42	; 0x2a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	9a a3       	std	Y+34, r25	; 0x22
     d26:	89 a3       	std	Y+33, r24	; 0x21
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <Create_system_password+0x202>
     d2a:	88 ec       	ldi	r24, 0xC8	; 200
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	98 a3       	std	Y+32, r25	; 0x20
     d30:	8f 8f       	std	Y+31, r24	; 0x1f
     d32:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d34:	98 a1       	ldd	r25, Y+32	; 0x20
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <Create_system_password+0x1f0>
     d3a:	98 a3       	std	Y+32, r25	; 0x20
     d3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	89 a1       	ldd	r24, Y+33	; 0x21
     d40:	9a a1       	ldd	r25, Y+34	; 0x22
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	9a a3       	std	Y+34, r25	; 0x22
     d46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	89 a1       	ldd	r24, Y+33	; 0x21
     d4a:	9a a1       	ldd	r25, Y+34	; 0x22
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	69 f7       	brne	.-38     	; 0xd2a <Create_system_password+0x1e4>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <Create_system_password+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	6b a1       	ldd	r22, Y+35	; 0x23
     d54:	7c a1       	ldd	r23, Y+36	; 0x24
     d56:	8d a1       	ldd	r24, Y+37	; 0x25
     d58:	9e a1       	ldd	r25, Y+38	; 0x26
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9a a3       	std	Y+34, r25	; 0x22
     d64:	89 a3       	std	Y+33, r24	; 0x21
     d66:	89 a1       	ldd	r24, Y+33	; 0x21
     d68:	9a a1       	ldd	r25, Y+34	; 0x22
     d6a:	9e 8f       	std	Y+30, r25	; 0x1e
     d6c:	8d 8f       	std	Y+29, r24	; 0x1d
     d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d70:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <Create_system_password+0x22c>
     d76:	9e 8f       	std	Y+30, r25	; 0x1e
     d78:	8d 8f       	std	Y+29, r24	; 0x1d
void Create_system_password(uint8 pass[], uint8 repass[]){
	LCD_clearScreen();
	_delay_ms(200);
	LCD_displayString("Plzz enter Pass: ");
	LCD_moveCursor(1,0);
	for(uint8 i =0 ; i<5 ;i++){
     d7a:	8a ad       	ldd	r24, Y+58	; 0x3a
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	8a af       	std	Y+58, r24	; 0x3a
     d80:	8a ad       	ldd	r24, Y+58	; 0x3a
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	08 f4       	brcc	.+2      	; 0xd88 <Create_system_password+0x242>
     d86:	6d cf       	rjmp	.-294    	; 0xc62 <Create_system_password+0x11c>
		LCD_displayCharacter('*');
		//LCD_intgerToString(pass[i]);
		_delay_ms(300);											// delay for the push button during clicking on it

	}
	while(KEYPAD_getPressedKey()!=13);							//waiting for enter(ON/C)
     d88:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
     d8c:	8d 30       	cpi	r24, 0x0D	; 13
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <Create_system_password+0x242>
	LCD_clearScreen();
     d90:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a8 e4       	ldi	r26, 0x48	; 72
     d9a:	b3 e4       	ldi	r27, 0x43	; 67
     d9c:	89 8f       	std	Y+25, r24	; 0x19
     d9e:	9a 8f       	std	Y+26, r25	; 0x1a
     da0:	ab 8f       	std	Y+27, r26	; 0x1b
     da2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	4a ef       	ldi	r20, 0xFA	; 250
     db2:	54 e4       	ldi	r21, 0x44	; 68
     db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	8d 8b       	std	Y+21, r24	; 0x15
     dbe:	9e 8b       	std	Y+22, r25	; 0x16
     dc0:	af 8b       	std	Y+23, r26	; 0x17
     dc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dc4:	6d 89       	ldd	r22, Y+21	; 0x15
     dc6:	7e 89       	ldd	r23, Y+22	; 0x16
     dc8:	8f 89       	ldd	r24, Y+23	; 0x17
     dca:	98 8d       	ldd	r25, Y+24	; 0x18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e8       	ldi	r20, 0x80	; 128
     dd2:	5f e3       	ldi	r21, 0x3F	; 63
     dd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd8:	88 23       	and	r24, r24
     dda:	2c f4       	brge	.+10     	; 0xde6 <Create_system_password+0x2a0>
		__ticks = 1;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9c 8b       	std	Y+20, r25	; 0x14
     de2:	8b 8b       	std	Y+19, r24	; 0x13
     de4:	3f c0       	rjmp	.+126    	; 0xe64 <Create_system_password+0x31e>
	else if (__tmp > 65535)
     de6:	6d 89       	ldd	r22, Y+21	; 0x15
     de8:	7e 89       	ldd	r23, Y+22	; 0x16
     dea:	8f 89       	ldd	r24, Y+23	; 0x17
     dec:	98 8d       	ldd	r25, Y+24	; 0x18
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	3f ef       	ldi	r19, 0xFF	; 255
     df2:	4f e7       	ldi	r20, 0x7F	; 127
     df4:	57 e4       	ldi	r21, 0x47	; 71
     df6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfa:	18 16       	cp	r1, r24
     dfc:	4c f5       	brge	.+82     	; 0xe50 <Create_system_password+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfe:	69 8d       	ldd	r22, Y+25	; 0x19
     e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e2       	ldi	r20, 0x20	; 32
     e0c:	51 e4       	ldi	r21, 0x41	; 65
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	bc 01       	movw	r22, r24
     e18:	cd 01       	movw	r24, r26
     e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9c 8b       	std	Y+20, r25	; 0x14
     e24:	8b 8b       	std	Y+19, r24	; 0x13
     e26:	0f c0       	rjmp	.+30     	; 0xe46 <Create_system_password+0x300>
     e28:	88 ec       	ldi	r24, 0xC8	; 200
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	9a 8b       	std	Y+18, r25	; 0x12
     e2e:	89 8b       	std	Y+17, r24	; 0x11
     e30:	89 89       	ldd	r24, Y+17	; 0x11
     e32:	9a 89       	ldd	r25, Y+18	; 0x12
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <Create_system_password+0x2ee>
     e38:	9a 8b       	std	Y+18, r25	; 0x12
     e3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	9c 89       	ldd	r25, Y+20	; 0x14
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	9c 8b       	std	Y+20, r25	; 0x14
     e44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e46:	8b 89       	ldd	r24, Y+19	; 0x13
     e48:	9c 89       	ldd	r25, Y+20	; 0x14
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	69 f7       	brne	.-38     	; 0xe28 <Create_system_password+0x2e2>
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <Create_system_password+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e50:	6d 89       	ldd	r22, Y+21	; 0x15
     e52:	7e 89       	ldd	r23, Y+22	; 0x16
     e54:	8f 89       	ldd	r24, Y+23	; 0x17
     e56:	98 8d       	ldd	r25, Y+24	; 0x18
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9c 8b       	std	Y+20, r25	; 0x14
     e62:	8b 8b       	std	Y+19, r24	; 0x13
     e64:	8b 89       	ldd	r24, Y+19	; 0x13
     e66:	9c 89       	ldd	r25, Y+20	; 0x14
     e68:	98 8b       	std	Y+16, r25	; 0x10
     e6a:	8f 87       	std	Y+15, r24	; 0x0f
     e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6e:	98 89       	ldd	r25, Y+16	; 0x10
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <Create_system_password+0x32a>
     e74:	98 8b       	std	Y+16, r25	; 0x10
     e76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);												//extra delay
	LCD_displayString("Plz re-enter it: ");
     e78:	82 e7       	ldi	r24, 0x72	; 114
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
	LCD_moveCursor(1, 0);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_moveCursor>
	for(uint8 i =0 ; i<5 ;i++){
     e88:	19 ae       	std	Y+57, r1	; 0x39
     e8a:	8f c0       	rjmp	.+286    	; 0xfaa <Create_system_password+0x464>
		do {
			repass[i]=KEYPAD_getPressedKey();
     e8c:	89 ad       	ldd	r24, Y+57	; 0x39
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8d ad       	ldd	r24, Y+61	; 0x3d
     e94:	9e ad       	ldd	r25, Y+62	; 0x3e
     e96:	8c 01       	movw	r16, r24
     e98:	02 0f       	add	r16, r18
     e9a:	13 1f       	adc	r17, r19
     e9c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 83       	st	Z, r24
		}while(repass[i]>9);
     ea4:	89 ad       	ldd	r24, Y+57	; 0x39
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	8d ad       	ldd	r24, Y+61	; 0x3d
     eac:	9e ad       	ldd	r25, Y+62	; 0x3e
     eae:	fc 01       	movw	r30, r24
     eb0:	e2 0f       	add	r30, r18
     eb2:	f3 1f       	adc	r31, r19
     eb4:	80 81       	ld	r24, Z
     eb6:	8a 30       	cpi	r24, 0x0A	; 10
     eb8:	48 f7       	brcc	.-46     	; 0xe8c <Create_system_password+0x346>
		LCD_displayCharacter('*');
     eba:	8a e2       	ldi	r24, 0x2A	; 42
     ebc:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_displayCharacter>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a6 e9       	ldi	r26, 0x96	; 150
     ec6:	b3 e4       	ldi	r27, 0x43	; 67
     ec8:	8b 87       	std	Y+11, r24	; 0x0b
     eca:	9c 87       	std	Y+12, r25	; 0x0c
     ecc:	ad 87       	std	Y+13, r26	; 0x0d
     ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	4a ef       	ldi	r20, 0xFA	; 250
     ede:	54 e4       	ldi	r21, 0x44	; 68
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	8f 83       	std	Y+7, r24	; 0x07
     eea:	98 87       	std	Y+8, r25	; 0x08
     eec:	a9 87       	std	Y+9, r26	; 0x09
     eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	5f e3       	ldi	r21, 0x3F	; 63
     f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f04:	88 23       	and	r24, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <Create_system_password+0x3cc>
		__ticks = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	3f c0       	rjmp	.+126    	; 0xf90 <Create_system_password+0x44a>
	else if (__tmp > 65535)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	57 e4       	ldi	r21, 0x47	; 71
     f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	4c f5       	brge	.+82     	; 0xf7c <Create_system_password+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	9e 85       	ldd	r25, Y+14	; 0x0e
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <Create_system_password+0x42c>
     f54:	88 ec       	ldi	r24, 0xC8	; 200
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9c 83       	std	Y+4, r25	; 0x04
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <Create_system_password+0x41a>
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	69 f7       	brne	.-38     	; 0xf54 <Create_system_password+0x40e>
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <Create_system_password+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7c:	6f 81       	ldd	r22, Y+7	; 0x07
     f7e:	78 85       	ldd	r23, Y+8	; 0x08
     f80:	89 85       	ldd	r24, Y+9	; 0x09
     f82:	9a 85       	ldd	r25, Y+10	; 0x0a
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <Create_system_password+0x456>
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
	while(KEYPAD_getPressedKey()!=13);							//waiting for enter(ON/C)
	LCD_clearScreen();
	_delay_ms(200);												//extra delay
	LCD_displayString("Plz re-enter it: ");
	LCD_moveCursor(1, 0);
	for(uint8 i =0 ; i<5 ;i++){
     fa4:	89 ad       	ldd	r24, Y+57	; 0x39
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	89 af       	std	Y+57, r24	; 0x39
     faa:	89 ad       	ldd	r24, Y+57	; 0x39
     fac:	85 30       	cpi	r24, 0x05	; 5
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <Create_system_password+0x46c>
     fb0:	6d cf       	rjmp	.-294    	; 0xe8c <Create_system_password+0x346>
		}while(repass[i]>9);
		LCD_displayCharacter('*');
		//LCD_intgerToString(repass[i]);
		_delay_ms(300);
	}
	while(KEYPAD_getPressedKey()!=13);
     fb2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
     fb6:	8d 30       	cpi	r24, 0x0D	; 13
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <Create_system_password+0x46c>
	LCD_clearScreen();
     fba:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
}
     fbe:	ee 96       	adiw	r28, 0x3e	; 62
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <Check_created_password>:

/*
 * function to send the two passwords to the Control_ecu by the UART
 * */
errors Check_created_password(uint8 pass[], uint8 repass[]){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	27 97       	sbiw	r28, 0x07	; 7
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	9d 83       	std	Y+5, r25	; 0x05
     fea:	8c 83       	std	Y+4, r24	; 0x04
     fec:	7f 83       	std	Y+7, r23	; 0x07
     fee:	6e 83       	std	Y+6, r22	; 0x06

	for(uint8 i =0;i<5;i++)
     ff0:	1a 82       	std	Y+2, r1	; 0x02
     ff2:	0e c0       	rjmp	.+28     	; 0x1010 <Check_created_password+0x3c>
		UART_send_byte(pass[i]);
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	fc 01       	movw	r30, r24
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	80 81       	ld	r24, Z
    1006:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
/*
 * function to send the two passwords to the Control_ecu by the UART
 * */
errors Check_created_password(uint8 pass[], uint8 repass[]){

	for(uint8 i =0;i<5;i++)
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	78 f3       	brcs	.-34     	; 0xff4 <Check_created_password+0x20>
		UART_send_byte(pass[i]);
	for(uint8 i =0;i<5;i++)
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	0e c0       	rjmp	.+28     	; 0x1036 <Check_created_password+0x62>
		UART_send_byte(repass[i]);
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	8e 81       	ldd	r24, Y+6	; 0x06
    1022:	9f 81       	ldd	r25, Y+7	; 0x07
    1024:	fc 01       	movw	r30, r24
    1026:	e2 0f       	add	r30, r18
    1028:	f3 1f       	adc	r31, r19
    102a:	80 81       	ld	r24, Z
    102c:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
 * */
errors Check_created_password(uint8 pass[], uint8 repass[]){

	for(uint8 i =0;i<5;i++)
		UART_send_byte(pass[i]);
	for(uint8 i =0;i<5;i++)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	78 f3       	brcs	.-34     	; 0x101a <Check_created_password+0x46>
		UART_send_byte(repass[i]);

	errors status = UART_receive_byte(); // waiting to know that the two passwords are matched and is saved
    103c:	0e 94 42 14 	call	0x2884	; 0x2884 <UART_receive_byte>
    1040:	8b 83       	std	Y+3, r24	; 0x03
	return status;
    1042:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1044:	27 96       	adiw	r28, 0x07	; 7
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <verify_password>:

/*
 *  function to verify the given password from the keypad with the password saved in the EEPROM
 * */
errors verify_password(uint8 pass[]){
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <verify_password+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <verify_password+0x8>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03

	UART_send_byte(Check_this_password); //order the Control_ecu to check it with the password saved in the EEPROM
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
	for(uint8 i =0;i<5;i++)
    106c:	19 82       	std	Y+1, r1	; 0x01
    106e:	0e c0       	rjmp	.+28     	; 0x108c <verify_password+0x36>
		UART_send_byte(pass[i]);
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	fc 01       	movw	r30, r24
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	80 81       	ld	r24, Z
    1082:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
 *  function to verify the given password from the keypad with the password saved in the EEPROM
 * */
errors verify_password(uint8 pass[]){

	UART_send_byte(Check_this_password); //order the Control_ecu to check it with the password saved in the EEPROM
	for(uint8 i =0;i<5;i++)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	85 30       	cpi	r24, 0x05	; 5
    1090:	78 f3       	brcs	.-34     	; 0x1070 <verify_password+0x1a>
		UART_send_byte(pass[i]);
	errors status = UART_receive_byte(); //waiting to confirm that the password is correct or not
    1092:	0e 94 42 14 	call	0x2884	; 0x2884 <UART_receive_byte>
    1096:	8a 83       	std	Y+2, r24	; 0x02
	return status;
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <count_18sec>:

/*
 * function to count 18sec by timer1
 * */
void count_18sec(){
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	count++;
    10b0:	80 91 fc 00 	lds	r24, 0x00FC
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	80 93 fc 00 	sts	0x00FC, r24
	if(count==18){
    10ba:	80 91 fc 00 	lds	r24, 0x00FC
    10be:	82 31       	cpi	r24, 0x12	; 18
    10c0:	41 f4       	brne	.+16     	; 0x10d2 <count_18sec+0x2a>
		Timer1_deInit();
    10c2:	0e 94 98 13 	call	0x2730	; 0x2730 <Timer1_deInit>
		LCD_clearScreen();
    10c6:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		LCD_displayString("Door is locking");
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
	}
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <count_15sec>:

/*
 * function to count 15sec by timer1
 * */
void count_15sec(){
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	count++;
    10e0:	80 91 fc 00 	lds	r24, 0x00FC
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	80 93 fc 00 	sts	0x00FC, r24
	if(count==15){
    10ea:	80 91 fc 00 	lds	r24, 0x00FC
    10ee:	8f 30       	cpi	r24, 0x0F	; 15
    10f0:	21 f4       	brne	.+8      	; 0x10fa <count_15sec+0x22>
		Timer1_deInit();
    10f2:	0e 94 98 13 	call	0x2730	; 0x2730 <Timer1_deInit>
		LCD_clearScreen();
    10f6:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
	}
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <count_60sec>:

/*
 * function to count 60sec by timer1
 * */
void count_60sec(){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	count++;
    1108:	80 91 fc 00 	lds	r24, 0x00FC
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	80 93 fc 00 	sts	0x00FC, r24
	if(count==60){
    1112:	80 91 fc 00 	lds	r24, 0x00FC
    1116:	8c 33       	cpi	r24, 0x3C	; 60
    1118:	39 f4       	brne	.+14     	; 0x1128 <count_60sec+0x28>
		Timer1_deInit();
    111a:	0e 94 98 13 	call	0x2730	; 0x2730 <Timer1_deInit>
		LCD_clearScreen();
    111e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		UART_send_byte(Buzzer_OFF); // hear i controlled the timing of the buzzer by the HMI_ecu not the Control_ecu unlike the motor
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>

	}
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <delay_timer1>:

/*
 * function to setCallBack of timer1 with one of the functions above
 * */
void delay_timer1(uint8 sec){
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	2e 97       	sbiw	r28, 0x0e	; 14
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	8f 83       	std	Y+7, r24	; 0x07

	count =0;
    1144:	10 92 fc 00 	sts	0x00FC, r1
	Timer1_ConfigType config_timer1={0,31250,FCPU_256,CTC}; //this config count one second
    1148:	9e 01       	movw	r18, r28
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	3b 87       	std	Y+11, r19	; 0x0b
    1150:	2a 87       	std	Y+10, r18	; 0x0a
    1152:	8f ee       	ldi	r24, 0xEF	; 239
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9d 87       	std	Y+13, r25	; 0x0d
    1158:	8c 87       	std	Y+12, r24	; 0x0c
    115a:	96 e0       	ldi	r25, 0x06	; 6
    115c:	9e 87       	std	Y+14, r25	; 0x0e
    115e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1160:	fd 85       	ldd	r31, Y+13	; 0x0d
    1162:	00 80       	ld	r0, Z
    1164:	2c 85       	ldd	r18, Y+12	; 0x0c
    1166:	3d 85       	ldd	r19, Y+13	; 0x0d
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	3d 87       	std	Y+13, r19	; 0x0d
    116e:	2c 87       	std	Y+12, r18	; 0x0c
    1170:	ea 85       	ldd	r30, Y+10	; 0x0a
    1172:	fb 85       	ldd	r31, Y+11	; 0x0b
    1174:	00 82       	st	Z, r0
    1176:	2a 85       	ldd	r18, Y+10	; 0x0a
    1178:	3b 85       	ldd	r19, Y+11	; 0x0b
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	3b 87       	std	Y+11, r19	; 0x0b
    1180:	2a 87       	std	Y+10, r18	; 0x0a
    1182:	3e 85       	ldd	r19, Y+14	; 0x0e
    1184:	31 50       	subi	r19, 0x01	; 1
    1186:	3e 87       	std	Y+14, r19	; 0x0e
    1188:	8e 85       	ldd	r24, Y+14	; 0x0e
    118a:	88 23       	and	r24, r24
    118c:	41 f7       	brne	.-48     	; 0x115e <delay_timer1+0x30>
	Timer1_init(&config_timer1);
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	0e 94 47 13 	call	0x268e	; 0x268e <Timer1_init>

	switch (sec){
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	e8 2f       	mov	r30, r24
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	f9 87       	std	Y+9, r31	; 0x09
    119e:	e8 87       	std	Y+8, r30	; 0x08
    11a0:	28 85       	ldd	r18, Y+8	; 0x08
    11a2:	39 85       	ldd	r19, Y+9	; 0x09
    11a4:	22 31       	cpi	r18, 0x12	; 18
    11a6:	31 05       	cpc	r19, r1
    11a8:	79 f0       	breq	.+30     	; 0x11c8 <delay_timer1+0x9a>
    11aa:	88 85       	ldd	r24, Y+8	; 0x08
    11ac:	99 85       	ldd	r25, Y+9	; 0x09
    11ae:	8c 33       	cpi	r24, 0x3C	; 60
    11b0:	91 05       	cpc	r25, r1
    11b2:	79 f0       	breq	.+30     	; 0x11d2 <delay_timer1+0xa4>
    11b4:	e8 85       	ldd	r30, Y+8	; 0x08
    11b6:	f9 85       	ldd	r31, Y+9	; 0x09
    11b8:	ef 30       	cpi	r30, 0x0F	; 15
    11ba:	f1 05       	cpc	r31, r1
    11bc:	71 f4       	brne	.+28     	; 0x11da <delay_timer1+0xac>
	case 15:
		Timer1_setCallBack(count_15sec);
    11be:	8c e6       	ldi	r24, 0x6C	; 108
    11c0:	98 e0       	ldi	r25, 0x08	; 8
    11c2:	0e 94 b0 13 	call	0x2760	; 0x2760 <Timer1_setCallBack>
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <delay_timer1+0xac>
		break;
	case 18:
		Timer1_setCallBack(count_18sec);
    11c8:	84 e5       	ldi	r24, 0x54	; 84
    11ca:	98 e0       	ldi	r25, 0x08	; 8
    11cc:	0e 94 b0 13 	call	0x2760	; 0x2760 <Timer1_setCallBack>
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <delay_timer1+0xac>
		break;
	case 60:
		Timer1_setCallBack(count_60sec);
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	98 e0       	ldi	r25, 0x08	; 8
    11d6:	0e 94 b0 13 	call	0x2760	; 0x2760 <Timer1_setCallBack>
		break;

	}

}
    11da:	2e 96       	adiw	r28, 0x0e	; 14
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <Main_options>:

/*
 * function to print the main menu and return either + or -
 * */
uint8 Main_options(){
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    11f4:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    11f8:	84 e9       	ldi	r24, 0x94	; 148
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1200:	22 ea       	ldi	r18, 0xA2	; 162
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayStringRowColumn>
	return KEYPAD_getPressedKey();
    120e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <Open_door>:

/*
 * function to open the door
 * */
void Open_door(uint8 pass[]){
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	a1 97       	sbiw	r28, 0x21	; 33
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	99 a3       	std	Y+33, r25	; 0x21
    1232:	88 a3       	std	Y+32, r24	; 0x20
	uint8 false_pass_count=0;
    1234:	1f 8e       	std	Y+31, r1	; 0x1f
    1236:	38 c1       	rjmp	.+624    	; 0x14a8 <Open_door+0x290>
	while(false_pass_count<3){ //to count false password max three times
		LCD_clearScreen();
    1238:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a8 e4       	ldi	r26, 0x48	; 72
    1242:	b3 e4       	ldi	r27, 0x43	; 67
    1244:	89 8f       	std	Y+25, r24	; 0x19
    1246:	9a 8f       	std	Y+26, r25	; 0x1a
    1248:	ab 8f       	std	Y+27, r26	; 0x1b
    124a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124c:	69 8d       	ldd	r22, Y+25	; 0x19
    124e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	4a ef       	ldi	r20, 0xFA	; 250
    125a:	54 e4       	ldi	r21, 0x44	; 68
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8d 8b       	std	Y+21, r24	; 0x15
    1266:	9e 8b       	std	Y+22, r25	; 0x16
    1268:	af 8b       	std	Y+23, r26	; 0x17
    126a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    126c:	6d 89       	ldd	r22, Y+21	; 0x15
    126e:	7e 89       	ldd	r23, Y+22	; 0x16
    1270:	8f 89       	ldd	r24, Y+23	; 0x17
    1272:	98 8d       	ldd	r25, Y+24	; 0x18
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	2c f4       	brge	.+10     	; 0x128e <Open_door+0x76>
		__ticks = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 8b       	std	Y+20, r25	; 0x14
    128a:	8b 8b       	std	Y+19, r24	; 0x13
    128c:	3f c0       	rjmp	.+126    	; 0x130c <Open_door+0xf4>
	else if (__tmp > 65535)
    128e:	6d 89       	ldd	r22, Y+21	; 0x15
    1290:	7e 89       	ldd	r23, Y+22	; 0x16
    1292:	8f 89       	ldd	r24, Y+23	; 0x17
    1294:	98 8d       	ldd	r25, Y+24	; 0x18
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	4f e7       	ldi	r20, 0x7F	; 127
    129c:	57 e4       	ldi	r21, 0x47	; 71
    129e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	4c f5       	brge	.+82     	; 0x12f8 <Open_door+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a6:	69 8d       	ldd	r22, Y+25	; 0x19
    12a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	51 e4       	ldi	r21, 0x41	; 65
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9c 8b       	std	Y+20, r25	; 0x14
    12cc:	8b 8b       	std	Y+19, r24	; 0x13
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <Open_door+0xd6>
    12d0:	88 ec       	ldi	r24, 0xC8	; 200
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9a 8b       	std	Y+18, r25	; 0x12
    12d6:	89 8b       	std	Y+17, r24	; 0x11
    12d8:	89 89       	ldd	r24, Y+17	; 0x11
    12da:	9a 89       	ldd	r25, Y+18	; 0x12
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <Open_door+0xc4>
    12e0:	9a 8b       	std	Y+18, r25	; 0x12
    12e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e4:	8b 89       	ldd	r24, Y+19	; 0x13
    12e6:	9c 89       	ldd	r25, Y+20	; 0x14
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	9c 8b       	std	Y+20, r25	; 0x14
    12ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	69 f7       	brne	.-38     	; 0x12d0 <Open_door+0xb8>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <Open_door+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f8:	6d 89       	ldd	r22, Y+21	; 0x15
    12fa:	7e 89       	ldd	r23, Y+22	; 0x16
    12fc:	8f 89       	ldd	r24, Y+23	; 0x17
    12fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9c 8b       	std	Y+20, r25	; 0x14
    130a:	8b 8b       	std	Y+19, r24	; 0x13
    130c:	8b 89       	ldd	r24, Y+19	; 0x13
    130e:	9c 89       	ldd	r25, Y+20	; 0x14
    1310:	98 8b       	std	Y+16, r25	; 0x10
    1312:	8f 87       	std	Y+15, r24	; 0x0f
    1314:	8f 85       	ldd	r24, Y+15	; 0x0f
    1316:	98 89       	ldd	r25, Y+16	; 0x10
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <Open_door+0x100>
    131c:	98 8b       	std	Y+16, r25	; 0x10
    131e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
    1320:	82 eb       	ldi	r24, 0xB2	; 178
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_moveCursor>
		for(uint8 i =0 ; i<5 ;i++){
    1330:	1d 8e       	std	Y+29, r1	; 0x1d
    1332:	8f c0       	rjmp	.+286    	; 0x1452 <Open_door+0x23a>
			do {
				pass[i]=KEYPAD_getPressedKey();
    1334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	88 a1       	ldd	r24, Y+32	; 0x20
    133c:	99 a1       	ldd	r25, Y+33	; 0x21
    133e:	8c 01       	movw	r16, r24
    1340:	02 0f       	add	r16, r18
    1342:	13 1f       	adc	r17, r19
    1344:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
    1348:	f8 01       	movw	r30, r16
    134a:	80 83       	st	Z, r24
			}while(pass[i]>9);
    134c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	88 a1       	ldd	r24, Y+32	; 0x20
    1354:	99 a1       	ldd	r25, Y+33	; 0x21
    1356:	fc 01       	movw	r30, r24
    1358:	e2 0f       	add	r30, r18
    135a:	f3 1f       	adc	r31, r19
    135c:	80 81       	ld	r24, Z
    135e:	8a 30       	cpi	r24, 0x0A	; 10
    1360:	48 f7       	brcc	.-46     	; 0x1334 <Open_door+0x11c>
			//LCD_intgerToString(pass[i]);
			LCD_displayCharacter('*');
    1362:	8a e2       	ldi	r24, 0x2A	; 42
    1364:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_displayCharacter>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a6 e9       	ldi	r26, 0x96	; 150
    136e:	b3 e4       	ldi	r27, 0x43	; 67
    1370:	8b 87       	std	Y+11, r24	; 0x0b
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	ad 87       	std	Y+13, r26	; 0x0d
    1376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	6b 85       	ldd	r22, Y+11	; 0x0b
    137a:	7c 85       	ldd	r23, Y+12	; 0x0c
    137c:	8d 85       	ldd	r24, Y+13	; 0x0d
    137e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8f 83       	std	Y+7, r24	; 0x07
    1392:	98 87       	std	Y+8, r25	; 0x08
    1394:	a9 87       	std	Y+9, r26	; 0x09
    1396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <Open_door+0x1a2>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <Open_door+0x220>
	else if (__tmp > 65535)
    13ba:	6f 81       	ldd	r22, Y+7	; 0x07
    13bc:	78 85       	ldd	r23, Y+8	; 0x08
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <Open_door+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <Open_door+0x202>
    13fc:	88 ec       	ldi	r24, 0xC8	; 200
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <Open_door+0x1f0>
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <Open_door+0x1e4>
    1422:	14 c0       	rjmp	.+40     	; 0x144c <Open_door+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <Open_door+0x22c>
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
	while(false_pass_count<3){ //to count false password max three times
		LCD_clearScreen();
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
		LCD_moveCursor(1, 0);
		for(uint8 i =0 ; i<5 ;i++){
    144c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	8d 8f       	std	Y+29, r24	; 0x1d
    1452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1454:	85 30       	cpi	r24, 0x05	; 5
    1456:	08 f4       	brcc	.+2      	; 0x145a <Open_door+0x242>
    1458:	6d cf       	rjmp	.-294    	; 0x1334 <Open_door+0x11c>
			}while(pass[i]>9);
			//LCD_intgerToString(pass[i]);
			LCD_displayCharacter('*');
			_delay_ms(300);
		}
		while(KEYPAD_getPressedKey()!=13);
    145a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
    145e:	8d 30       	cpi	r24, 0x0D	; 13
    1460:	e1 f7       	brne	.-8      	; 0x145a <Open_door+0x242>
		errors status = verify_password(pass); //waiting the Control_ecu to verify and give an ack or confirm
    1462:	88 a1       	ldd	r24, Y+32	; 0x20
    1464:	99 a1       	ldd	r25, Y+33	; 0x21
    1466:	0e 94 2b 08 	call	0x1056	; 0x1056 <verify_password>
    146a:	8e 8f       	std	Y+30, r24	; 0x1e

		if (status == right_password )
    146c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	c1 f4       	brne	.+48     	; 0x14a2 <Open_door+0x28a>
		{

			LCD_clearScreen();
    1472:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
			LCD_displayString("Door is Unlocking");
    1476:	83 ec       	ldi	r24, 0xC3	; 195
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
			UART_send_byte(open);//telling the Control_ecu to open which turn on the motor
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
			delay_timer1(18);
    1484:	82 e1       	ldi	r24, 0x12	; 18
    1486:	0e 94 97 08 	call	0x112e	; 0x112e <delay_timer1>
			while(count!=18){} // this polling to make the code stuck until finishing the 18 sec so that the screen can show only
    148a:	80 91 fc 00 	lds	r24, 0x00FC
    148e:	82 31       	cpi	r24, 0x12	; 18
    1490:	e1 f7       	brne	.-8      	; 0x148a <Open_door+0x272>
			delay_timer1(15);  // door is unlocking
    1492:	8f e0       	ldi	r24, 0x0F	; 15
    1494:	0e 94 97 08 	call	0x112e	; 0x112e <delay_timer1>
			while(count!=15){}
    1498:	80 91 fc 00 	lds	r24, 0x00FC
    149c:	8f 30       	cpi	r24, 0x0F	; 15
    149e:	e1 f7       	brne	.-8      	; 0x1498 <Open_door+0x280>
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <Open_door+0x298>
			break;
		}
		else
		{
			false_pass_count++; // increment it tell reaching 3
    14a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	8f 8f       	std	Y+31, r24	; 0x1f
/*
 * function to open the door
 * */
void Open_door(uint8 pass[]){
	uint8 false_pass_count=0;
	while(false_pass_count<3){ //to count false password max three times
    14a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <Open_door+0x298>
    14ae:	c4 ce       	rjmp	.-632    	; 0x1238 <Open_door+0x20>
		else
		{
			false_pass_count++; // increment it tell reaching 3
		}
	}
	if(false_pass_count==3){
    14b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	81 f4       	brne	.+32     	; 0x14d6 <Open_door+0x2be>

		LCD_clearScreen();
    14b6:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		LCD_displayString("ERROR");
    14ba:	85 ed       	ldi	r24, 0xD5	; 213
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
		UART_send_byte(Buzzer_ON);
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
		delay_timer1(60);
    14c8:	8c e3       	ldi	r24, 0x3C	; 60
    14ca:	0e 94 97 08 	call	0x112e	; 0x112e <delay_timer1>
		while(count!=60){}
    14ce:	80 91 fc 00 	lds	r24, 0x00FC
    14d2:	8c 33       	cpi	r24, 0x3C	; 60
    14d4:	e1 f7       	brne	.-8      	; 0x14ce <Open_door+0x2b6>
	}


}
    14d6:	a1 96       	adiw	r28, 0x21	; 33
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <Change_password>:
void Change_password(uint8 pass[]){
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	ed 97       	sbiw	r28, 0x3d	; 61
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	9d af       	std	Y+61, r25	; 0x3d
    1506:	8c af       	std	Y+60, r24	; 0x3c
	uint8 false_pass_count=0;
    1508:	1b ae       	std	Y+59, r1	; 0x3b
    150a:	28 c2       	rjmp	.+1104   	; 0x195c <Change_password+0x470>
	while(false_pass_count<3){
		LCD_clearScreen();
    150c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a8 e4       	ldi	r26, 0x48	; 72
    1516:	b3 e4       	ldi	r27, 0x43	; 67
    1518:	8d ab       	std	Y+53, r24	; 0x35
    151a:	9e ab       	std	Y+54, r25	; 0x36
    151c:	af ab       	std	Y+55, r26	; 0x37
    151e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	6d a9       	ldd	r22, Y+53	; 0x35
    1522:	7e a9       	ldd	r23, Y+54	; 0x36
    1524:	8f a9       	ldd	r24, Y+55	; 0x37
    1526:	98 ad       	ldd	r25, Y+56	; 0x38
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a ef       	ldi	r20, 0xFA	; 250
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	89 ab       	std	Y+49, r24	; 0x31
    153a:	9a ab       	std	Y+50, r25	; 0x32
    153c:	ab ab       	std	Y+51, r26	; 0x33
    153e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1540:	69 a9       	ldd	r22, Y+49	; 0x31
    1542:	7a a9       	ldd	r23, Y+50	; 0x32
    1544:	8b a9       	ldd	r24, Y+51	; 0x33
    1546:	9c a9       	ldd	r25, Y+52	; 0x34
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <Change_password+0x76>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	98 ab       	std	Y+48, r25	; 0x30
    155e:	8f a7       	std	Y+47, r24	; 0x2f
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <Change_password+0xf4>
	else if (__tmp > 65535)
    1562:	69 a9       	ldd	r22, Y+49	; 0x31
    1564:	7a a9       	ldd	r23, Y+50	; 0x32
    1566:	8b a9       	ldd	r24, Y+51	; 0x33
    1568:	9c a9       	ldd	r25, Y+52	; 0x34
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <Change_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	6d a9       	ldd	r22, Y+53	; 0x35
    157c:	7e a9       	ldd	r23, Y+54	; 0x36
    157e:	8f a9       	ldd	r24, Y+55	; 0x37
    1580:	98 ad       	ldd	r25, Y+56	; 0x38
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	98 ab       	std	Y+48, r25	; 0x30
    15a0:	8f a7       	std	Y+47, r24	; 0x2f
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <Change_password+0xd6>
    15a4:	88 ec       	ldi	r24, 0xC8	; 200
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9e a7       	std	Y+46, r25	; 0x2e
    15aa:	8d a7       	std	Y+45, r24	; 0x2d
    15ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <Change_password+0xc4>
    15b4:	9e a7       	std	Y+46, r25	; 0x2e
    15b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ba:	98 a9       	ldd	r25, Y+48	; 0x30
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	98 ab       	std	Y+48, r25	; 0x30
    15c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c4:	98 a9       	ldd	r25, Y+48	; 0x30
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <Change_password+0xb8>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <Change_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	69 a9       	ldd	r22, Y+49	; 0x31
    15ce:	7a a9       	ldd	r23, Y+50	; 0x32
    15d0:	8b a9       	ldd	r24, Y+51	; 0x33
    15d2:	9c a9       	ldd	r25, Y+52	; 0x34
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	98 ab       	std	Y+48, r25	; 0x30
    15de:	8f a7       	std	Y+47, r24	; 0x2f
    15e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e2:	98 a9       	ldd	r25, Y+48	; 0x30
    15e4:	9c a7       	std	Y+44, r25	; 0x2c
    15e6:	8b a7       	std	Y+43, r24	; 0x2b
    15e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <Change_password+0x100>
    15f0:	9c a7       	std	Y+44, r25	; 0x2c
    15f2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
    15f4:	82 eb       	ldi	r24, 0xB2	; 178
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
		LCD_moveCursor(1, 0);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_moveCursor>
		for(uint8 i =0 ; i<5 ;i++){
    1604:	19 ae       	std	Y+57, r1	; 0x39
    1606:	8f c0       	rjmp	.+286    	; 0x1726 <Change_password+0x23a>
			do {
				pass[i]=KEYPAD_getPressedKey();
    1608:	89 ad       	ldd	r24, Y+57	; 0x39
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1610:	9d ad       	ldd	r25, Y+61	; 0x3d
    1612:	8c 01       	movw	r16, r24
    1614:	02 0f       	add	r16, r18
    1616:	13 1f       	adc	r17, r19
    1618:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
    161c:	f8 01       	movw	r30, r16
    161e:	80 83       	st	Z, r24
			}while(pass[i]>9);
    1620:	89 ad       	ldd	r24, Y+57	; 0x39
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8c ad       	ldd	r24, Y+60	; 0x3c
    1628:	9d ad       	ldd	r25, Y+61	; 0x3d
    162a:	fc 01       	movw	r30, r24
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	80 81       	ld	r24, Z
    1632:	8a 30       	cpi	r24, 0x0A	; 10
    1634:	48 f7       	brcc	.-46     	; 0x1608 <Change_password+0x11c>
			//LCD_intgerToString(pass[i]);
			LCD_displayCharacter('*');
    1636:	8a e2       	ldi	r24, 0x2A	; 42
    1638:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_displayCharacter>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a6 e9       	ldi	r26, 0x96	; 150
    1642:	b3 e4       	ldi	r27, 0x43	; 67
    1644:	8f a3       	std	Y+39, r24	; 0x27
    1646:	98 a7       	std	Y+40, r25	; 0x28
    1648:	a9 a7       	std	Y+41, r26	; 0x29
    164a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6f a1       	ldd	r22, Y+39	; 0x27
    164e:	78 a5       	ldd	r23, Y+40	; 0x28
    1650:	89 a5       	ldd	r24, Y+41	; 0x29
    1652:	9a a5       	ldd	r25, Y+42	; 0x2a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a ef       	ldi	r20, 0xFA	; 250
    165a:	54 e4       	ldi	r21, 0x44	; 68
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8b a3       	std	Y+35, r24	; 0x23
    1666:	9c a3       	std	Y+36, r25	; 0x24
    1668:	ad a3       	std	Y+37, r26	; 0x25
    166a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    166c:	6b a1       	ldd	r22, Y+35	; 0x23
    166e:	7c a1       	ldd	r23, Y+36	; 0x24
    1670:	8d a1       	ldd	r24, Y+37	; 0x25
    1672:	9e a1       	ldd	r25, Y+38	; 0x26
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <Change_password+0x1a2>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9a a3       	std	Y+34, r25	; 0x22
    168a:	89 a3       	std	Y+33, r24	; 0x21
    168c:	3f c0       	rjmp	.+126    	; 0x170c <Change_password+0x220>
	else if (__tmp > 65535)
    168e:	6b a1       	ldd	r22, Y+35	; 0x23
    1690:	7c a1       	ldd	r23, Y+36	; 0x24
    1692:	8d a1       	ldd	r24, Y+37	; 0x25
    1694:	9e a1       	ldd	r25, Y+38	; 0x26
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <Change_password+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6f a1       	ldd	r22, Y+39	; 0x27
    16a8:	78 a5       	ldd	r23, Y+40	; 0x28
    16aa:	89 a5       	ldd	r24, Y+41	; 0x29
    16ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9a a3       	std	Y+34, r25	; 0x22
    16cc:	89 a3       	std	Y+33, r24	; 0x21
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <Change_password+0x202>
    16d0:	88 ec       	ldi	r24, 0xC8	; 200
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	98 a3       	std	Y+32, r25	; 0x20
    16d6:	8f 8f       	std	Y+31, r24	; 0x1f
    16d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16da:	98 a1       	ldd	r25, Y+32	; 0x20
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <Change_password+0x1f0>
    16e0:	98 a3       	std	Y+32, r25	; 0x20
    16e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	89 a1       	ldd	r24, Y+33	; 0x21
    16e6:	9a a1       	ldd	r25, Y+34	; 0x22
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9a a3       	std	Y+34, r25	; 0x22
    16ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	89 a1       	ldd	r24, Y+33	; 0x21
    16f0:	9a a1       	ldd	r25, Y+34	; 0x22
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <Change_password+0x1e4>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <Change_password+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6b a1       	ldd	r22, Y+35	; 0x23
    16fa:	7c a1       	ldd	r23, Y+36	; 0x24
    16fc:	8d a1       	ldd	r24, Y+37	; 0x25
    16fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9a a3       	std	Y+34, r25	; 0x22
    170a:	89 a3       	std	Y+33, r24	; 0x21
    170c:	89 a1       	ldd	r24, Y+33	; 0x21
    170e:	9a a1       	ldd	r25, Y+34	; 0x22
    1710:	9e 8f       	std	Y+30, r25	; 0x1e
    1712:	8d 8f       	std	Y+29, r24	; 0x1d
    1714:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1716:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <Change_password+0x22c>
    171c:	9e 8f       	std	Y+30, r25	; 0x1e
    171e:	8d 8f       	std	Y+29, r24	; 0x1d
	while(false_pass_count<3){
		LCD_clearScreen();
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
		LCD_moveCursor(1, 0);
		for(uint8 i =0 ; i<5 ;i++){
    1720:	89 ad       	ldd	r24, Y+57	; 0x39
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	89 af       	std	Y+57, r24	; 0x39
    1726:	89 ad       	ldd	r24, Y+57	; 0x39
    1728:	85 30       	cpi	r24, 0x05	; 5
    172a:	08 f4       	brcc	.+2      	; 0x172e <Change_password+0x242>
    172c:	6d cf       	rjmp	.-294    	; 0x1608 <Change_password+0x11c>
			//LCD_intgerToString(pass[i]);
			LCD_displayCharacter('*');
			_delay_ms(300);

		}
		while(KEYPAD_getPressedKey()!=13);
    172e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <KEYPAD_getPressedKey>
    1732:	8d 30       	cpi	r24, 0x0D	; 13
    1734:	e1 f7       	brne	.-8      	; 0x172e <Change_password+0x242>
		errors status = verify_password(pass);
    1736:	8c ad       	ldd	r24, Y+60	; 0x3c
    1738:	9d ad       	ldd	r25, Y+61	; 0x3d
    173a:	0e 94 2b 08 	call	0x1056	; 0x1056 <verify_password>
    173e:	8a af       	std	Y+58, r24	; 0x3a
		if (status == right_password )
    1740:	8a ad       	ldd	r24, Y+58	; 0x3a
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	09 f0       	breq	.+2      	; 0x1748 <Change_password+0x25c>
    1746:	07 c1       	rjmp	.+526    	; 0x1956 <Change_password+0x46a>
		{
			do{									//the same code at the beginning of the main is used to get two passwords
				LCD_clearScreen();
    1748:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a8 e4       	ldi	r26, 0x48	; 72
    1752:	b3 e4       	ldi	r27, 0x43	; 67
    1754:	89 8f       	std	Y+25, r24	; 0x19
    1756:	9a 8f       	std	Y+26, r25	; 0x1a
    1758:	ab 8f       	std	Y+27, r26	; 0x1b
    175a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175c:	69 8d       	ldd	r22, Y+25	; 0x19
    175e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a ef       	ldi	r20, 0xFA	; 250
    176a:	54 e4       	ldi	r21, 0x44	; 68
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	8d 8b       	std	Y+21, r24	; 0x15
    1776:	9e 8b       	std	Y+22, r25	; 0x16
    1778:	af 8b       	std	Y+23, r26	; 0x17
    177a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    177c:	6d 89       	ldd	r22, Y+21	; 0x15
    177e:	7e 89       	ldd	r23, Y+22	; 0x16
    1780:	8f 89       	ldd	r24, Y+23	; 0x17
    1782:	98 8d       	ldd	r25, Y+24	; 0x18
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e8       	ldi	r20, 0x80	; 128
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1790:	88 23       	and	r24, r24
    1792:	2c f4       	brge	.+10     	; 0x179e <Change_password+0x2b2>
		__ticks = 1;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	3f c0       	rjmp	.+126    	; 0x181c <Change_password+0x330>
	else if (__tmp > 65535)
    179e:	6d 89       	ldd	r22, Y+21	; 0x15
    17a0:	7e 89       	ldd	r23, Y+22	; 0x16
    17a2:	8f 89       	ldd	r24, Y+23	; 0x17
    17a4:	98 8d       	ldd	r25, Y+24	; 0x18
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	3f ef       	ldi	r19, 0xFF	; 255
    17aa:	4f e7       	ldi	r20, 0x7F	; 127
    17ac:	57 e4       	ldi	r21, 0x47	; 71
    17ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b2:	18 16       	cp	r1, r24
    17b4:	4c f5       	brge	.+82     	; 0x1808 <Change_password+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b6:	69 8d       	ldd	r22, Y+25	; 0x19
    17b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e2       	ldi	r20, 0x20	; 32
    17c4:	51 e4       	ldi	r21, 0x41	; 65
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9c 8b       	std	Y+20, r25	; 0x14
    17dc:	8b 8b       	std	Y+19, r24	; 0x13
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <Change_password+0x312>
    17e0:	88 ec       	ldi	r24, 0xC8	; 200
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9a 8b       	std	Y+18, r25	; 0x12
    17e6:	89 8b       	std	Y+17, r24	; 0x11
    17e8:	89 89       	ldd	r24, Y+17	; 0x11
    17ea:	9a 89       	ldd	r25, Y+18	; 0x12
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <Change_password+0x300>
    17f0:	9a 8b       	std	Y+18, r25	; 0x12
    17f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f4:	8b 89       	ldd	r24, Y+19	; 0x13
    17f6:	9c 89       	ldd	r25, Y+20	; 0x14
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	69 f7       	brne	.-38     	; 0x17e0 <Change_password+0x2f4>
    1806:	14 c0       	rjmp	.+40     	; 0x1830 <Change_password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9c 8b       	std	Y+20, r25	; 0x14
    181a:	8b 8b       	std	Y+19, r24	; 0x13
    181c:	8b 89       	ldd	r24, Y+19	; 0x13
    181e:	9c 89       	ldd	r25, Y+20	; 0x14
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	8f 87       	std	Y+15, r24	; 0x0f
    1824:	8f 85       	ldd	r24, Y+15	; 0x0f
    1826:	98 89       	ldd	r25, Y+16	; 0x10
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <Change_password+0x33c>
    182c:	98 8b       	std	Y+16, r25	; 0x10
    182e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				Create_system_password(pass, repass);
    1830:	8c ad       	ldd	r24, Y+60	; 0x3c
    1832:	9d ad       	ldd	r25, Y+61	; 0x3d
    1834:	24 e0       	ldi	r18, 0x04	; 4
    1836:	31 e0       	ldi	r19, 0x01	; 1
    1838:	b9 01       	movw	r22, r18
    183a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Create_system_password>
				UART_send_byte(save_new_pass);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
				status = Check_created_password(pass, repass);
    1844:	8c ad       	ldd	r24, Y+60	; 0x3c
    1846:	9d ad       	ldd	r25, Y+61	; 0x3d
    1848:	24 e0       	ldi	r18, 0x04	; 4
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	b9 01       	movw	r22, r18
    184e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <Check_created_password>
    1852:	8a af       	std	Y+58, r24	; 0x3a
				if (status == failed_to_save){
    1854:	8a ad       	ldd	r24, Y+58	; 0x3a
    1856:	88 23       	and	r24, r24
    1858:	09 f0       	breq	.+2      	; 0x185c <Change_password+0x370>
    185a:	78 c0       	rjmp	.+240    	; 0x194c <Change_password+0x460>
					LCD_displayString("Not Matched");
    185c:	8b ed       	ldi	r24, 0xDB	; 219
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e8       	ldi	r25, 0x80	; 128
    1868:	ab eb       	ldi	r26, 0xBB	; 187
    186a:	b4 e4       	ldi	r27, 0x44	; 68
    186c:	8b 87       	std	Y+11, r24	; 0x0b
    186e:	9c 87       	std	Y+12, r25	; 0x0c
    1870:	ad 87       	std	Y+13, r26	; 0x0d
    1872:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1874:	6b 85       	ldd	r22, Y+11	; 0x0b
    1876:	7c 85       	ldd	r23, Y+12	; 0x0c
    1878:	8d 85       	ldd	r24, Y+13	; 0x0d
    187a:	9e 85       	ldd	r25, Y+14	; 0x0e
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4a ef       	ldi	r20, 0xFA	; 250
    1882:	54 e4       	ldi	r21, 0x44	; 68
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	8f 83       	std	Y+7, r24	; 0x07
    188e:	98 87       	std	Y+8, r25	; 0x08
    1890:	a9 87       	std	Y+9, r26	; 0x09
    1892:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <Change_password+0x3ca>
		__ticks = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	3f c0       	rjmp	.+126    	; 0x1934 <Change_password+0x448>
	else if (__tmp > 65535)
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	4c f5       	brge	.+82     	; 0x1920 <Change_password+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <Change_password+0x42a>
    18f8:	88 ec       	ldi	r24, 0xC8	; 200
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <Change_password+0x418>
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f7       	brne	.-38     	; 0x18f8 <Change_password+0x40c>
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <Change_password+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <Change_password+0x454>
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1500);
					LCD_clearScreen();
    1948:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
				}
			}while(status== failed_to_save);
    194c:	8a ad       	ldd	r24, Y+58	; 0x3a
    194e:	88 23       	and	r24, r24
    1950:	09 f4       	brne	.+2      	; 0x1954 <Change_password+0x468>
    1952:	fa ce       	rjmp	.-524    	; 0x1748 <Change_password+0x25c>
    1954:	07 c0       	rjmp	.+14     	; 0x1964 <Change_password+0x478>
			break;
		}
		else
		{
			false_pass_count++;
    1956:	8b ad       	ldd	r24, Y+59	; 0x3b
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	8b af       	std	Y+59, r24	; 0x3b


}
void Change_password(uint8 pass[]){
	uint8 false_pass_count=0;
	while(false_pass_count<3){
    195c:	8b ad       	ldd	r24, Y+59	; 0x3b
    195e:	83 30       	cpi	r24, 0x03	; 3
    1960:	08 f4       	brcc	.+2      	; 0x1964 <Change_password+0x478>
    1962:	d4 cd       	rjmp	.-1112   	; 0x150c <Change_password+0x20>
		else
		{
			false_pass_count++;
		}
	}
	if(false_pass_count==3){
    1964:	8b ad       	ldd	r24, Y+59	; 0x3b
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	81 f4       	brne	.+32     	; 0x198a <Change_password+0x49e>
		LCD_clearScreen();
    196a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		LCD_displayString("ERROR");
    196e:	85 ed       	ldi	r24, 0xD5	; 213
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
		UART_send_byte(Buzzer_ON);
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
		delay_timer1(60);
    197c:	8c e3       	ldi	r24, 0x3C	; 60
    197e:	0e 94 97 08 	call	0x112e	; 0x112e <delay_timer1>
		while(count!=60){}
    1982:	80 91 fc 00 	lds	r24, 0x00FC
    1986:	8c 33       	cpi	r24, 0x3C	; 60
    1988:	e1 f7       	brne	.-8      	; 0x1982 <Change_password+0x496>
	}
}
    198a:	ed 96       	adiw	r28, 0x3d	; 61
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <main>:


int main(){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	6e 97       	sbiw	r28, 0x1e	; 30
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61

	SREG|=(1<<7); //used to enable Interrupts for timer1
    19b4:	af e5       	ldi	r26, 0x5F	; 95
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ef e5       	ldi	r30, 0x5F	; 95
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 68       	ori	r24, 0x80	; 128
    19c0:	8c 93       	st	X, r24
	LCD_init();
    19c2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_init>
	UART_config config={eight,disabled,one_bit,9600}; // config to transmit data with the second micro
    19c6:	9e 01       	movw	r18, r28
    19c8:	2f 5e       	subi	r18, 0xEF	; 239
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	3b 8f       	std	Y+27, r19	; 0x1b
    19ce:	2a 8f       	std	Y+26, r18	; 0x1a
    19d0:	85 ef       	ldi	r24, 0xF5	; 245
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9d 8f       	std	Y+29, r25	; 0x1d
    19d6:	8c 8f       	std	Y+28, r24	; 0x1c
    19d8:	97 e0       	ldi	r25, 0x07	; 7
    19da:	9e 8f       	std	Y+30, r25	; 0x1e
    19dc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    19de:	fd 8d       	ldd	r31, Y+29	; 0x1d
    19e0:	00 80       	ld	r0, Z
    19e2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    19e4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	3d 8f       	std	Y+29, r19	; 0x1d
    19ec:	2c 8f       	std	Y+28, r18	; 0x1c
    19ee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    19f0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    19f2:	00 82       	st	Z, r0
    19f4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    19f6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    19f8:	2f 5f       	subi	r18, 0xFF	; 255
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	3b 8f       	std	Y+27, r19	; 0x1b
    19fe:	2a 8f       	std	Y+26, r18	; 0x1a
    1a00:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1a02:	31 50       	subi	r19, 0x01	; 1
    1a04:	3e 8f       	std	Y+30, r19	; 0x1e
    1a06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a08:	88 23       	and	r24, r24
    1a0a:	41 f7       	brne	.-48     	; 0x19dc <main+0x3c>
	UART_init(&config);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	41 96       	adiw	r24, 0x11	; 17
    1a10:	0e 94 c2 13 	call	0x2784	; 0x2784 <UART_init>
	errors status;
	do{				// is used to create new pass by getting two passwords
		Create_system_password(pass, repass);
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	24 e0       	ldi	r18, 0x04	; 4
    1a1a:	31 e0       	ldi	r19, 0x01	; 1
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Create_system_password>
		status = Check_created_password(pass, repass);
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	24 e0       	ldi	r18, 0x04	; 4
    1a28:	31 e0       	ldi	r19, 0x01	; 1
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <Check_created_password>
    1a30:	88 8b       	std	Y+16, r24	; 0x10
		if (status == failed_to_save){
    1a32:	88 89       	ldd	r24, Y+16	; 0x10
    1a34:	88 23       	and	r24, r24
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <main+0x9a>
    1a38:	78 c0       	rjmp	.+240    	; 0x1b2a <main+0x18a>
			LCD_displayString("Not Matched");
    1a3a:	8b ed       	ldi	r24, 0xDB	; 219
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e8       	ldi	r25, 0x80	; 128
    1a46:	ab eb       	ldi	r26, 0xBB	; 187
    1a48:	b4 e4       	ldi	r27, 0x44	; 68
    1a4a:	8b 87       	std	Y+11, r24	; 0x0b
    1a4c:	9c 87       	std	Y+12, r25	; 0x0c
    1a4e:	ad 87       	std	Y+13, r26	; 0x0d
    1a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a ef       	ldi	r20, 0xFA	; 250
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8f 83       	std	Y+7, r24	; 0x07
    1a6c:	98 87       	std	Y+8, r25	; 0x08
    1a6e:	a9 87       	std	Y+9, r26	; 0x09
    1a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a72:	6f 81       	ldd	r22, Y+7	; 0x07
    1a74:	78 85       	ldd	r23, Y+8	; 0x08
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <main+0xf4>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <main+0x172>
	else if (__tmp > 65535)
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <main+0x154>
    1ad6:	88 ec       	ldi	r24, 0xC8	; 200
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <main+0x142>
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <main+0x136>
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <main+0x17e>
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			LCD_clearScreen();
    1b26:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		}
	}while(status== failed_to_save);
    1b2a:	88 89       	ldd	r24, Y+16	; 0x10
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <main+0x192>
    1b30:	71 cf       	rjmp	.-286    	; 0x1a14 <main+0x74>


	while(1){

		uint8 choice;
		choice = Main_options(); // always print the main menu when finish specific task
    1b32:	0e 94 f6 08 	call	0x11ec	; 0x11ec <Main_options>
    1b36:	8f 87       	std	Y+15, r24	; 0x0f
		switch (choice){
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	e8 2f       	mov	r30, r24
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	f9 8f       	std	Y+25, r31	; 0x19
    1b40:	e8 8f       	std	Y+24, r30	; 0x18
    1b42:	28 8d       	ldd	r18, Y+24	; 0x18
    1b44:	39 8d       	ldd	r19, Y+25	; 0x19
    1b46:	2b 32       	cpi	r18, 0x2B	; 43
    1b48:	31 05       	cpc	r19, r1
    1b4a:	31 f0       	breq	.+12     	; 0x1b58 <main+0x1b8>
    1b4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b50:	8d 32       	cpi	r24, 0x2D	; 45
    1b52:	91 05       	cpc	r25, r1
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <main+0x1c2>
    1b56:	ed cf       	rjmp	.-38     	; 0x1b32 <main+0x192>
		case '+':
			Open_door(pass);
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 0c 09 	call	0x1218	; 0x1218 <Open_door>
    1b60:	e8 cf       	rjmp	.-48     	; 0x1b32 <main+0x192>
			break;

		case '-':
			Change_password(pass);
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 76 0a 	call	0x14ec	; 0x14ec <Change_password>
    1b6a:	e3 cf       	rjmp	.-58     	; 0x1b32 <main+0x192>

00001b6c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	2e 97       	sbiw	r28, 0x0e	; 14
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	0e 94 bf 14 	call	0x297e	; 0x297e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 bf 14 	call	0x297e	; 0x297e <GPIO_setupPinDirection>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 ea       	ldi	r26, 0xA0	; 160
    1b9a:	b1 e4       	ldi	r27, 0x41	; 65
    1b9c:	8b 87       	std	Y+11, r24	; 0x0b
    1b9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ba0:	ad 87       	std	Y+13, r26	; 0x0d
    1ba2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a ef       	ldi	r20, 0xFA	; 250
    1bb2:	54 e4       	ldi	r21, 0x44	; 68
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8f 83       	std	Y+7, r24	; 0x07
    1bbe:	98 87       	std	Y+8, r25	; 0x08
    1bc0:	a9 87       	std	Y+9, r26	; 0x09
    1bc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc6:	78 85       	ldd	r23, Y+8	; 0x08
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <LCD_init+0x7a>
		__ticks = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1be6:	6f 81       	ldd	r22, Y+7	; 0x07
    1be8:	78 85       	ldd	r23, Y+8	; 0x08
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	4c f5       	brge	.+82     	; 0x1c50 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LCD_init+0xda>
    1c28:	88 ec       	ldi	r24, 0xC8	; 200
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9c 83       	std	Y+4, r25	; 0x04
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_init+0xc8>
    1c38:	9c 83       	std	Y+4, r25	; 0x04
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <LCD_init+0xbc>
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_init+0x104>
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)// this way is used to make a static config so that i could be able to connect
	                          // the lcd on any pins without editing the code
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	6f ef       	ldi	r22, 0xFF	; 255
    1c7c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1c80:	88 e3       	ldi	r24, 0x38	; 56
    1c82:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c86:	8c e0       	ldi	r24, 0x0C	; 12
    1c88:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <LCD_sendCommand>
}
    1c92:	2e 96       	adiw	r28, 0x0e	; 14
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	e9 97       	sbiw	r28, 0x39	; 57
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e8       	ldi	r26, 0x80	; 128
    1cca:	bf e3       	ldi	r27, 0x3F	; 63
    1ccc:	8d ab       	std	Y+53, r24	; 0x35
    1cce:	9e ab       	std	Y+54, r25	; 0x36
    1cd0:	af ab       	std	Y+55, r26	; 0x37
    1cd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cda:	98 ad       	ldd	r25, Y+56	; 0x38
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a ef       	ldi	r20, 0xFA	; 250
    1ce2:	54 e4       	ldi	r21, 0x44	; 68
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	89 ab       	std	Y+49, r24	; 0x31
    1cee:	9a ab       	std	Y+50, r25	; 0x32
    1cf0:	ab ab       	std	Y+51, r26	; 0x33
    1cf2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <LCD_sendCommand+0x72>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	98 ab       	std	Y+48, r25	; 0x30
    1d12:	8f a7       	std	Y+47, r24	; 0x2f
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1d16:	69 a9       	ldd	r22, Y+49	; 0x31
    1d18:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d30:	7e a9       	ldd	r23, Y+54	; 0x36
    1d32:	8f a9       	ldd	r24, Y+55	; 0x37
    1d34:	98 ad       	ldd	r25, Y+56	; 0x38
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	98 ab       	std	Y+48, r25	; 0x30
    1d54:	8f a7       	std	Y+47, r24	; 0x2f
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <LCD_sendCommand+0xd2>
    1d58:	88 ec       	ldi	r24, 0xC8	; 200
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9e a7       	std	Y+46, r25	; 0x2e
    1d5e:	8d a7       	std	Y+45, r24	; 0x2d
    1d60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_sendCommand+0xc0>
    1d68:	9e a7       	std	Y+46, r25	; 0x2e
    1d6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	98 ab       	std	Y+48, r25	; 0x30
    1d74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d78:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <LCD_sendCommand+0xb4>
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	69 a9       	ldd	r22, Y+49	; 0x31
    1d82:	7a a9       	ldd	r23, Y+50	; 0x32
    1d84:	8b a9       	ldd	r24, Y+51	; 0x33
    1d86:	9c a9       	ldd	r25, Y+52	; 0x34
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	98 ab       	std	Y+48, r25	; 0x30
    1d92:	8f a7       	std	Y+47, r24	; 0x2f
    1d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d96:	98 a9       	ldd	r25, Y+48	; 0x30
    1d98:	9c a7       	std	Y+44, r25	; 0x2c
    1d9a:	8b a7       	std	Y+43, r24	; 0x2b
    1d9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_sendCommand+0xfc>
    1da4:	9c a7       	std	Y+44, r25	; 0x2c
    1da6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	62 e0       	ldi	r22, 0x02	; 2
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e8       	ldi	r26, 0x80	; 128
    1db8:	bf e3       	ldi	r27, 0x3F	; 63
    1dba:	8f a3       	std	Y+39, r24	; 0x27
    1dbc:	98 a7       	std	Y+40, r25	; 0x28
    1dbe:	a9 a7       	std	Y+41, r26	; 0x29
    1dc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8b a3       	std	Y+35, r24	; 0x23
    1ddc:	9c a3       	std	Y+36, r25	; 0x24
    1dde:	ad a3       	std	Y+37, r26	; 0x25
    1de0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de2:	6b a1       	ldd	r22, Y+35	; 0x23
    1de4:	7c a1       	ldd	r23, Y+36	; 0x24
    1de6:	8d a1       	ldd	r24, Y+37	; 0x25
    1de8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <LCD_sendCommand+0x160>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1e04:	6b a1       	ldd	r22, Y+35	; 0x23
    1e06:	7c a1       	ldd	r23, Y+36	; 0x24
    1e08:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e20:	89 a5       	ldd	r24, Y+41	; 0x29
    1e22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <LCD_sendCommand+0x1c0>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	98 a3       	std	Y+32, r25	; 0x20
    1e4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e50:	98 a1       	ldd	r25, Y+32	; 0x20
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_sendCommand+0x1ae>
    1e56:	98 a3       	std	Y+32, r25	; 0x20
    1e58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	89 a1       	ldd	r24, Y+33	; 0x21
    1e66:	9a a1       	ldd	r25, Y+34	; 0x22
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <LCD_sendCommand+0x1a2>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e70:	7c a1       	ldd	r23, Y+36	; 0x24
    1e72:	8d a1       	ldd	r24, Y+37	; 0x25
    1e74:	9e a1       	ldd	r25, Y+38	; 0x26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	9e 8f       	std	Y+30, r25	; 0x1e
    1e88:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_sendCommand+0x1ea>
    1e92:	9e 8f       	std	Y+30, r25	; 0x1e
    1e94:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	69 ad       	ldd	r22, Y+57	; 0x39
    1e9a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <GPIO_writePort>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e8       	ldi	r26, 0x80	; 128
    1ea4:	bf e3       	ldi	r27, 0x3F	; 63
    1ea6:	89 8f       	std	Y+25, r24	; 0x19
    1ea8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eaa:	ab 8f       	std	Y+27, r26	; 0x1b
    1eac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8d 8b       	std	Y+21, r24	; 0x15
    1ec8:	9e 8b       	std	Y+22, r25	; 0x16
    1eca:	af 8b       	std	Y+23, r26	; 0x17
    1ecc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ece:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <LCD_sendCommand+0x2ac>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9a 8b       	std	Y+18, r25	; 0x12
    1f38:	89 8b       	std	Y+17, r24	; 0x11
    1f3a:	89 89       	ldd	r24, Y+17	; 0x11
    1f3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_sendCommand+0x29a>
    1f42:	9a 8b       	std	Y+18, r25	; 0x12
    1f44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	8b 89       	ldd	r24, Y+19	; 0x13
    1f52:	9c 89       	ldd	r25, Y+20	; 0x14
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <LCD_sendCommand+0x28e>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f60:	98 8d       	ldd	r25, Y+24	; 0x18
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9c 8b       	std	Y+20, r25	; 0x14
    1f6c:	8b 8b       	std	Y+19, r24	; 0x13
    1f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f70:	9c 89       	ldd	r25, Y+20	; 0x14
    1f72:	98 8b       	std	Y+16, r25	; 0x10
    1f74:	8f 87       	std	Y+15, r24	; 0x0f
    1f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f78:	98 89       	ldd	r25, Y+16	; 0x10
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_sendCommand+0x2d6>
    1f7e:	98 8b       	std	Y+16, r25	; 0x10
    1f80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e8       	ldi	r26, 0x80	; 128
    1f92:	bf e3       	ldi	r27, 0x3F	; 63
    1f94:	8b 87       	std	Y+11, r24	; 0x0b
    1f96:	9c 87       	std	Y+12, r25	; 0x0c
    1f98:	ad 87       	std	Y+13, r26	; 0x0d
    1f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a ef       	ldi	r20, 0xFA	; 250
    1faa:	54 e4       	ldi	r21, 0x44	; 68
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8f 83       	std	Y+7, r24	; 0x07
    1fb6:	98 87       	std	Y+8, r25	; 0x08
    1fb8:	a9 87       	std	Y+9, r26	; 0x09
    1fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <LCD_sendCommand+0x33a>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	0f c0       	rjmp	.+30     	; 0x203e <LCD_sendCommand+0x39a>
    2020:	88 ec       	ldi	r24, 0xC8	; 200
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 83       	std	Y+4, r25	; 0x04
    2026:	8b 83       	std	Y+3, r24	; 0x03
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <LCD_sendCommand+0x388>
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <LCD_sendCommand+0x37c>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_sendCommand+0x3c4>
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2070:	e9 96       	adiw	r28, 0x39	; 57
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	e9 97       	sbiw	r28, 0x39	; 57
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf e3       	ldi	r27, 0x3F	; 63
    20aa:	8d ab       	std	Y+53, r24	; 0x35
    20ac:	9e ab       	std	Y+54, r25	; 0x36
    20ae:	af ab       	std	Y+55, r26	; 0x37
    20b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6d a9       	ldd	r22, Y+53	; 0x35
    20b4:	7e a9       	ldd	r23, Y+54	; 0x36
    20b6:	8f a9       	ldd	r24, Y+55	; 0x37
    20b8:	98 ad       	ldd	r25, Y+56	; 0x38
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	89 ab       	std	Y+49, r24	; 0x31
    20cc:	9a ab       	std	Y+50, r25	; 0x32
    20ce:	ab ab       	std	Y+51, r26	; 0x33
    20d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20d2:	69 a9       	ldd	r22, Y+49	; 0x31
    20d4:	7a a9       	ldd	r23, Y+50	; 0x32
    20d6:	8b a9       	ldd	r24, Y+51	; 0x33
    20d8:	9c a9       	ldd	r25, Y+52	; 0x34
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_displayCharacter+0x72>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	98 ab       	std	Y+48, r25	; 0x30
    20f0:	8f a7       	std	Y+47, r24	; 0x2f
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    20f4:	69 a9       	ldd	r22, Y+49	; 0x31
    20f6:	7a a9       	ldd	r23, Y+50	; 0x32
    20f8:	8b a9       	ldd	r24, Y+51	; 0x33
    20fa:	9c a9       	ldd	r25, Y+52	; 0x34
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6d a9       	ldd	r22, Y+53	; 0x35
    210e:	7e a9       	ldd	r23, Y+54	; 0x36
    2110:	8f a9       	ldd	r24, Y+55	; 0x37
    2112:	98 ad       	ldd	r25, Y+56	; 0x38
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	98 ab       	std	Y+48, r25	; 0x30
    2132:	8f a7       	std	Y+47, r24	; 0x2f
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_displayCharacter+0xd2>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9e a7       	std	Y+46, r25	; 0x2e
    213c:	8d a7       	std	Y+45, r24	; 0x2d
    213e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2140:	9e a5       	ldd	r25, Y+46	; 0x2e
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_displayCharacter+0xc0>
    2146:	9e a7       	std	Y+46, r25	; 0x2e
    2148:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8f a5       	ldd	r24, Y+47	; 0x2f
    214c:	98 a9       	ldd	r25, Y+48	; 0x30
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	98 ab       	std	Y+48, r25	; 0x30
    2152:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8f a5       	ldd	r24, Y+47	; 0x2f
    2156:	98 a9       	ldd	r25, Y+48	; 0x30
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_displayCharacter+0xb4>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	69 a9       	ldd	r22, Y+49	; 0x31
    2160:	7a a9       	ldd	r23, Y+50	; 0x32
    2162:	8b a9       	ldd	r24, Y+51	; 0x33
    2164:	9c a9       	ldd	r25, Y+52	; 0x34
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	98 ab       	std	Y+48, r25	; 0x30
    2170:	8f a7       	std	Y+47, r24	; 0x2f
    2172:	8f a5       	ldd	r24, Y+47	; 0x2f
    2174:	98 a9       	ldd	r25, Y+48	; 0x30
    2176:	9c a7       	std	Y+44, r25	; 0x2c
    2178:	8b a7       	std	Y+43, r24	; 0x2b
    217a:	8b a5       	ldd	r24, Y+43	; 0x2b
    217c:	9c a5       	ldd	r25, Y+44	; 0x2c
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_displayCharacter+0xfc>
    2182:	9c a7       	std	Y+44, r25	; 0x2c
    2184:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	62 e0       	ldi	r22, 0x02	; 2
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a0 e8       	ldi	r26, 0x80	; 128
    2196:	bf e3       	ldi	r27, 0x3F	; 63
    2198:	8f a3       	std	Y+39, r24	; 0x27
    219a:	98 a7       	std	Y+40, r25	; 0x28
    219c:	a9 a7       	std	Y+41, r26	; 0x29
    219e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	6f a1       	ldd	r22, Y+39	; 0x27
    21a2:	78 a5       	ldd	r23, Y+40	; 0x28
    21a4:	89 a5       	ldd	r24, Y+41	; 0x29
    21a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a ef       	ldi	r20, 0xFA	; 250
    21ae:	54 e4       	ldi	r21, 0x44	; 68
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8b a3       	std	Y+35, r24	; 0x23
    21ba:	9c a3       	std	Y+36, r25	; 0x24
    21bc:	ad a3       	std	Y+37, r26	; 0x25
    21be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21c0:	6b a1       	ldd	r22, Y+35	; 0x23
    21c2:	7c a1       	ldd	r23, Y+36	; 0x24
    21c4:	8d a1       	ldd	r24, Y+37	; 0x25
    21c6:	9e a1       	ldd	r25, Y+38	; 0x26
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9a a3       	std	Y+34, r25	; 0x22
    21de:	89 a3       	std	Y+33, r24	; 0x21
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    21e2:	6b a1       	ldd	r22, Y+35	; 0x23
    21e4:	7c a1       	ldd	r23, Y+36	; 0x24
    21e6:	8d a1       	ldd	r24, Y+37	; 0x25
    21e8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	6f a1       	ldd	r22, Y+39	; 0x27
    21fc:	78 a5       	ldd	r23, Y+40	; 0x28
    21fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2200:	9a a5       	ldd	r25, Y+42	; 0x2a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	89 a3       	std	Y+33, r24	; 0x21
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <LCD_displayCharacter+0x1c0>
    2224:	88 ec       	ldi	r24, 0xC8	; 200
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	98 a3       	std	Y+32, r25	; 0x20
    222a:	8f 8f       	std	Y+31, r24	; 0x1f
    222c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    222e:	98 a1       	ldd	r25, Y+32	; 0x20
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_displayCharacter+0x1ae>
    2234:	98 a3       	std	Y+32, r25	; 0x20
    2236:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	89 a1       	ldd	r24, Y+33	; 0x21
    223a:	9a a1       	ldd	r25, Y+34	; 0x22
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9a a3       	std	Y+34, r25	; 0x22
    2240:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	89 a1       	ldd	r24, Y+33	; 0x21
    2244:	9a a1       	ldd	r25, Y+34	; 0x22
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <LCD_displayCharacter+0x1a2>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6b a1       	ldd	r22, Y+35	; 0x23
    224e:	7c a1       	ldd	r23, Y+36	; 0x24
    2250:	8d a1       	ldd	r24, Y+37	; 0x25
    2252:	9e a1       	ldd	r25, Y+38	; 0x26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9a a3       	std	Y+34, r25	; 0x22
    225e:	89 a3       	std	Y+33, r24	; 0x21
    2260:	89 a1       	ldd	r24, Y+33	; 0x21
    2262:	9a a1       	ldd	r25, Y+34	; 0x22
    2264:	9e 8f       	std	Y+30, r25	; 0x1e
    2266:	8d 8f       	std	Y+29, r24	; 0x1d
    2268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_displayCharacter+0x1ea>
    2270:	9e 8f       	std	Y+30, r25	; 0x1e
    2272:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	69 ad       	ldd	r22, Y+57	; 0x39
    2278:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <GPIO_writePort>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 e8       	ldi	r26, 0x80	; 128
    2282:	bf e3       	ldi	r27, 0x3F	; 63
    2284:	89 8f       	std	Y+25, r24	; 0x19
    2286:	9a 8f       	std	Y+26, r25	; 0x1a
    2288:	ab 8f       	std	Y+27, r26	; 0x1b
    228a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	69 8d       	ldd	r22, Y+25	; 0x19
    228e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a ef       	ldi	r20, 0xFA	; 250
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8d 8b       	std	Y+21, r24	; 0x15
    22a6:	9e 8b       	std	Y+22, r25	; 0x16
    22a8:	af 8b       	std	Y+23, r26	; 0x17
    22aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <LCD_displayCharacter+0x24c>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    22ce:	6d 89       	ldd	r22, Y+21	; 0x15
    22d0:	7e 89       	ldd	r23, Y+22	; 0x16
    22d2:	8f 89       	ldd	r24, Y+23	; 0x17
    22d4:	98 8d       	ldd	r25, Y+24	; 0x18
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	69 8d       	ldd	r22, Y+25	; 0x19
    22e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_displayCharacter+0x2ac>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9a 8b       	std	Y+18, r25	; 0x12
    2316:	89 8b       	std	Y+17, r24	; 0x11
    2318:	89 89       	ldd	r24, Y+17	; 0x11
    231a:	9a 89       	ldd	r25, Y+18	; 0x12
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_displayCharacter+0x29a>
    2320:	9a 8b       	std	Y+18, r25	; 0x12
    2322:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8b 89       	ldd	r24, Y+19	; 0x13
    2326:	9c 89       	ldd	r25, Y+20	; 0x14
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8b 89       	ldd	r24, Y+19	; 0x13
    2330:	9c 89       	ldd	r25, Y+20	; 0x14
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <LCD_displayCharacter+0x28e>
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6d 89       	ldd	r22, Y+21	; 0x15
    233a:	7e 89       	ldd	r23, Y+22	; 0x16
    233c:	8f 89       	ldd	r24, Y+23	; 0x17
    233e:	98 8d       	ldd	r25, Y+24	; 0x18
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	8b 8b       	std	Y+19, r24	; 0x13
    234c:	8b 89       	ldd	r24, Y+19	; 0x13
    234e:	9c 89       	ldd	r25, Y+20	; 0x14
    2350:	98 8b       	std	Y+16, r25	; 0x10
    2352:	8f 87       	std	Y+15, r24	; 0x0f
    2354:	8f 85       	ldd	r24, Y+15	; 0x0f
    2356:	98 89       	ldd	r25, Y+16	; 0x10
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_displayCharacter+0x2d6>
    235c:	98 8b       	std	Y+16, r25	; 0x10
    235e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e8       	ldi	r26, 0x80	; 128
    2370:	bf e3       	ldi	r27, 0x3F	; 63
    2372:	8b 87       	std	Y+11, r24	; 0x0b
    2374:	9c 87       	std	Y+12, r25	; 0x0c
    2376:	ad 87       	std	Y+13, r26	; 0x0d
    2378:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a ef       	ldi	r20, 0xFA	; 250
    2388:	54 e4       	ldi	r21, 0x44	; 68
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	8f 83       	std	Y+7, r24	; 0x07
    2394:	98 87       	std	Y+8, r25	; 0x08
    2396:	a9 87       	std	Y+9, r26	; 0x09
    2398:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23da:	9e 85       	ldd	r25, Y+14	; 0x0e
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_displayCharacter+0x39a>
    23fe:	88 ec       	ldi	r24, 0xC8	; 200
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_displayCharacter+0x388>
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_displayCharacter+0x37c>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_displayCharacter+0x3c4>
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    244e:	e9 96       	adiw	r28, 0x39	; 57
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <LCD_displayString+0x6>
    2466:	0f 92       	push	r0
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	9b 83       	std	Y+3, r25	; 0x03
    246e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2470:	19 82       	std	Y+1, r1	; 0x01
    2472:	0e c0       	rjmp	.+28     	; 0x2490 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	9b 81       	ldd	r25, Y+3	; 0x03
    247e:	fc 01       	movw	r30, r24
    2480:	e2 0f       	add	r30, r18
    2482:	f3 1f       	adc	r31, r19
    2484:	80 81       	ld	r24, Z
    2486:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_displayCharacter>
		i++;
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	8f 5f       	subi	r24, 0xFF	; 255
    248e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	80 81       	ld	r24, Z
    24a2:	88 23       	and	r24, r24
    24a4:	39 f7       	brne	.-50     	; 0x2474 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <LCD_moveCursor+0x6>
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <LCD_moveCursor+0x8>
    24ba:	0f 92       	push	r0
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    24c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	3d 83       	std	Y+5, r19	; 0x05
    24cc:	2c 83       	std	Y+4, r18	; 0x04
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	9d 81       	ldd	r25, Y+5	; 0x05
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	91 05       	cpc	r25, r1
    24d6:	c1 f0       	breq	.+48     	; 0x2508 <LCD_moveCursor+0x56>
    24d8:	2c 81       	ldd	r18, Y+4	; 0x04
    24da:	3d 81       	ldd	r19, Y+5	; 0x05
    24dc:	22 30       	cpi	r18, 0x02	; 2
    24de:	31 05       	cpc	r19, r1
    24e0:	2c f4       	brge	.+10     	; 0x24ec <LCD_moveCursor+0x3a>
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	9d 81       	ldd	r25, Y+5	; 0x05
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	61 f0       	breq	.+24     	; 0x2502 <LCD_moveCursor+0x50>
    24ea:	19 c0       	rjmp	.+50     	; 0x251e <LCD_moveCursor+0x6c>
    24ec:	2c 81       	ldd	r18, Y+4	; 0x04
    24ee:	3d 81       	ldd	r19, Y+5	; 0x05
    24f0:	22 30       	cpi	r18, 0x02	; 2
    24f2:	31 05       	cpc	r19, r1
    24f4:	69 f0       	breq	.+26     	; 0x2510 <LCD_moveCursor+0x5e>
    24f6:	8c 81       	ldd	r24, Y+4	; 0x04
    24f8:	9d 81       	ldd	r25, Y+5	; 0x05
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	91 05       	cpc	r25, r1
    24fe:	61 f0       	breq	.+24     	; 0x2518 <LCD_moveCursor+0x66>
    2500:	0e c0       	rjmp	.+28     	; 0x251e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	0b c0       	rjmp	.+22     	; 0x251e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	80 5c       	subi	r24, 0xC0	; 192
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	07 c0       	rjmp	.+14     	; 0x251e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	80 5f       	subi	r24, 0xF0	; 240
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	03 c0       	rjmp	.+6      	; 0x251e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	80 5b       	subi	r24, 0xB0	; 176
    251c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	80 68       	ori	r24, 0x80	; 128
    2522:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <LCD_sendCommand>
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <LCD_displayStringRowColumn+0x6>
    253c:	00 d0       	rcall	.+0      	; 0x253e <LCD_displayStringRowColumn+0x8>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	6a 83       	std	Y+2, r22	; 0x02
    2546:	5c 83       	std	Y+4, r21	; 0x04
    2548:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	6a 81       	ldd	r22, Y+2	; 0x02
    254e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	62 97       	sbiw	r28, 0x12	; 18
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	9a 8b       	std	Y+18, r25	; 0x12
    257e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	9e 01       	movw	r18, r28
    2586:	2f 5f       	subi	r18, 0xFF	; 255
    2588:	3f 4f       	sbci	r19, 0xFF	; 255
    258a:	b9 01       	movw	r22, r18
    258c:	4a e0       	ldi	r20, 0x0A	; 10
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	0e 94 dd 19 	call	0x33ba	; 0x33ba <itoa>
   LCD_displayString(buff); /* Display the string */
    2594:	ce 01       	movw	r24, r28
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_displayString>
}
    259c:	62 96       	adiw	r28, 0x12	; 18
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <LCD_sendCommand>
}
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <__vector_7>:
#include "avr/io.h"
#include <avr/interrupt.h>

static volatile void(*function_ptr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect){
    25c2:	1f 92       	push	r1
    25c4:	0f 92       	push	r0
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	0f 92       	push	r0
    25ca:	11 24       	eor	r1, r1
    25cc:	2f 93       	push	r18
    25ce:	3f 93       	push	r19
    25d0:	4f 93       	push	r20
    25d2:	5f 93       	push	r21
    25d4:	6f 93       	push	r22
    25d6:	7f 93       	push	r23
    25d8:	8f 93       	push	r24
    25da:	9f 93       	push	r25
    25dc:	af 93       	push	r26
    25de:	bf 93       	push	r27
    25e0:	ef 93       	push	r30
    25e2:	ff 93       	push	r31
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
	if(function_ptr!=NULL_PTR)
    25ec:	80 91 fd 00 	lds	r24, 0x00FD
    25f0:	90 91 fe 00 	lds	r25, 0x00FE
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	29 f0       	breq	.+10     	; 0x2602 <__vector_7+0x40>
		{
			function_ptr();
    25f8:	e0 91 fd 00 	lds	r30, 0x00FD
    25fc:	f0 91 fe 00 	lds	r31, 0x00FE
    2600:	09 95       	icall
		}
}
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	ff 91       	pop	r31
    2608:	ef 91       	pop	r30
    260a:	bf 91       	pop	r27
    260c:	af 91       	pop	r26
    260e:	9f 91       	pop	r25
    2610:	8f 91       	pop	r24
    2612:	7f 91       	pop	r23
    2614:	6f 91       	pop	r22
    2616:	5f 91       	pop	r21
    2618:	4f 91       	pop	r20
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

00002628 <__vector_9>:

ISR(TIMER1_OVF_vect){
    2628:	1f 92       	push	r1
    262a:	0f 92       	push	r0
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	0f 92       	push	r0
    2630:	11 24       	eor	r1, r1
    2632:	2f 93       	push	r18
    2634:	3f 93       	push	r19
    2636:	4f 93       	push	r20
    2638:	5f 93       	push	r21
    263a:	6f 93       	push	r22
    263c:	7f 93       	push	r23
    263e:	8f 93       	push	r24
    2640:	9f 93       	push	r25
    2642:	af 93       	push	r26
    2644:	bf 93       	push	r27
    2646:	ef 93       	push	r30
    2648:	ff 93       	push	r31
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	if(function_ptr!=NULL_PTR)
    2652:	80 91 fd 00 	lds	r24, 0x00FD
    2656:	90 91 fe 00 	lds	r25, 0x00FE
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	29 f0       	breq	.+10     	; 0x2668 <__vector_9+0x40>
			{
				function_ptr();
    265e:	e0 91 fd 00 	lds	r30, 0x00FD
    2662:	f0 91 fe 00 	lds	r31, 0x00FE
    2666:	09 95       	icall
			}
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	0f 90       	pop	r0
    268a:	1f 90       	pop	r1
    268c:	18 95       	reti

0000268e <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * config){
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	00 d0       	rcall	.+0      	; 0x2694 <Timer1_init+0x6>
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config->initial_value;
    269c:	ac e4       	ldi	r26, 0x4C	; 76
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	9c 93       	st	X, r25
    26ac:	8e 93       	st	-X, r24
	OCR1A = config->compare_value;
    26ae:	aa e4       	ldi	r26, 0x4A	; 74
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e9 81       	ldd	r30, Y+1	; 0x01
    26b4:	fa 81       	ldd	r31, Y+2	; 0x02
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	11 96       	adiw	r26, 0x01	; 1
    26bc:	9c 93       	st	X, r25
    26be:	8e 93       	st	-X, r24
	if(config->mode == Normal){
    26c0:	e9 81       	ldd	r30, Y+1	; 0x01
    26c2:	fa 81       	ldd	r31, Y+2	; 0x02
    26c4:	85 81       	ldd	r24, Z+5	; 0x05
    26c6:	88 23       	and	r24, r24
    26c8:	29 f4       	brne	.+10     	; 0x26d4 <Timer1_init+0x46>
		TIMSK = 1 << TOIE1;
    26ca:	e9 e5       	ldi	r30, 0x59	; 89
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	80 83       	st	Z, r24
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <Timer1_init+0x4e>
	}
	else
		TIMSK = 1 << OCIE1A;
    26d4:	e9 e5       	ldi	r30, 0x59	; 89
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 e1       	ldi	r24, 0x10	; 16
    26da:	80 83       	st	Z, r24
	TCCR1A= (1<<FOC1A) | (1<<FOC1B) | ((TCCR1A & 0XFC )| (config->mode & 0x3));
    26dc:	af e4       	ldi	r26, 0x4F	; 79
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	ef e4       	ldi	r30, 0x4F	; 79
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	98 2f       	mov	r25, r24
    26e8:	9c 7f       	andi	r25, 0xFC	; 252
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	85 81       	ldd	r24, Z+5	; 0x05
    26f0:	83 70       	andi	r24, 0x03	; 3
    26f2:	89 2b       	or	r24, r25
    26f4:	8c 60       	ori	r24, 0x0C	; 12
    26f6:	8c 93       	st	X, r24
	TCCR1B = ((TCCR1B & 0XE7)|((config->mode & 0xC)<<1)) | (config->prescaler);
    26f8:	ae e4       	ldi	r26, 0x4E	; 78
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	ee e4       	ldi	r30, 0x4E	; 78
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	28 2f       	mov	r18, r24
    2704:	27 7e       	andi	r18, 0xE7	; 231
    2706:	e9 81       	ldd	r30, Y+1	; 0x01
    2708:	fa 81       	ldd	r31, Y+2	; 0x02
    270a:	85 81       	ldd	r24, Z+5	; 0x05
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	8c 70       	andi	r24, 0x0C	; 12
    2712:	90 70       	andi	r25, 0x00	; 0
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	92 2f       	mov	r25, r18
    271a:	98 2b       	or	r25, r24
    271c:	e9 81       	ldd	r30, Y+1	; 0x01
    271e:	fa 81       	ldd	r31, Y+2	; 0x02
    2720:	84 81       	ldd	r24, Z+4	; 0x04
    2722:	89 2b       	or	r24, r25
    2724:	8c 93       	st	X, r24

}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <Timer1_deInit>:

void Timer1_deInit(){
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2738:	ef e4       	ldi	r30, 0x4F	; 79
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	10 82       	st	Z, r1
	TCCR1B=0;
    273e:	ee e4       	ldi	r30, 0x4E	; 78
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	10 82       	st	Z, r1
	TCNT1=0;
    2744:	ec e4       	ldi	r30, 0x4C	; 76
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	11 82       	std	Z+1, r1	; 0x01
    274a:	10 82       	st	Z, r1
	OCR1A=0;
    274c:	ea e4       	ldi	r30, 0x4A	; 74
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	11 82       	std	Z+1, r1	; 0x01
    2752:	10 82       	st	Z, r1
	TIMSK=0;
    2754:	e9 e5       	ldi	r30, 0x59	; 89
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	10 82       	st	Z, r1
}
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <Timer1_setCallBack+0x6>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01

  function_ptr=a_ptr;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	90 93 fe 00 	sts	0x00FE, r25
    2776:	80 93 fd 00 	sts	0x00FD, r24
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <UART_init>:
#include "UART.h"
#include "std_types.h"
#include "common_macros.h"
#include "avr/io.h"

void UART_init(UART_config * config){
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	00 d0       	rcall	.+0      	; 0x278a <UART_init+0x6>
    278a:	00 d0       	rcall	.+0      	; 0x278c <UART_init+0x8>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2794:	1a 82       	std	Y+2, r1	; 0x02
    2796:	19 82       	std	Y+1, r1	; 0x01
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
    2798:	eb 81       	ldd	r30, Y+3	; 0x03
    279a:	fc 81       	ldd	r31, Y+4	; 0x04
    279c:	83 81       	ldd	r24, Z+3	; 0x03
    279e:	94 81       	ldd	r25, Z+4	; 0x04
    27a0:	a5 81       	ldd	r26, Z+5	; 0x05
    27a2:	b6 81       	ldd	r27, Z+6	; 0x06
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	aa 1f       	adc	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	aa 1f       	adc	r26, r26
    27b2:	bb 1f       	adc	r27, r27
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	aa 1f       	adc	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	9c 01       	movw	r18, r24
    27be:	ad 01       	movw	r20, r26
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	92 e1       	ldi	r25, 0x12	; 18
    27c4:	aa e7       	ldi	r26, 0x7A	; 122
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 84 19 	call	0x3308	; 0x3308 <__udivmodsi4>
    27d0:	da 01       	movw	r26, r20
    27d2:	c9 01       	movw	r24, r18
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
	UCSRA =(1<<U2X);
    27da:	eb e2       	ldi	r30, 0x2B	; 43
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);
    27e2:	ea e2       	ldi	r30, 0x2A	; 42
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	88 e1       	ldi	r24, 0x18	; 24
    27e8:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|((config->no_of_bit_data)<<1)|((config->stopbit)<<3)|((config->parity)<<4);
    27ea:	a0 e4       	ldi	r26, 0x40	; 64
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	eb 81       	ldd	r30, Y+3	; 0x03
    27f0:	fc 81       	ldd	r31, Y+4	; 0x04
    27f2:	80 81       	ld	r24, Z
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	28 2f       	mov	r18, r24
    27fe:	20 68       	ori	r18, 0x80	; 128
    2800:	eb 81       	ldd	r30, Y+3	; 0x03
    2802:	fc 81       	ldd	r31, Y+4	; 0x04
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	28 2b       	or	r18, r24
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	81 81       	ldd	r24, Z+1	; 0x01
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	82 95       	swap	r24
    2824:	92 95       	swap	r25
    2826:	90 7f       	andi	r25, 0xF0	; 240
    2828:	98 27       	eor	r25, r24
    282a:	80 7f       	andi	r24, 0xF0	; 240
    282c:	98 27       	eor	r25, r24
    282e:	82 2b       	or	r24, r18
    2830:	8c 93       	st	X, r24
	UBRRH=(ubrr_value>>8);
    2832:	e0 e4       	ldi	r30, 0x40	; 64
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	89 2f       	mov	r24, r25
    283c:	99 27       	eor	r25, r25
    283e:	80 83       	st	Z, r24
	UBRRL=(ubrr_value);
    2840:	e9 e2       	ldi	r30, 0x29	; 41
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	80 83       	st	Z, r24

}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <UART_send_byte>:


void UART_send_byte(uint8 byte){
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2862:	eb e2       	ldi	r30, 0x2B	; 43
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	80 72       	andi	r24, 0x20	; 32
    286e:	90 70       	andi	r25, 0x00	; 0
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	b9 f3       	breq	.-18     	; 0x2862 <UART_send_byte+0xc>
	UDR=byte;
    2874:	ec e2       	ldi	r30, 0x2C	; 44
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	80 83       	st	Z, r24
}
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <UART_receive_byte>:

uint8 UART_receive_byte(){
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    288c:	eb e2       	ldi	r30, 0x2B	; 43
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	88 23       	and	r24, r24
    2894:	dc f7       	brge	.-10     	; 0x288c <UART_receive_byte+0x8>
	return UDR;
    2896:	ec e2       	ldi	r30, 0x2C	; 44
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
}
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <UART_send_string>:

void UART_send_string(uint8 *str){
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <UART_send_string+0x6>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <UART_send_string+0x8>
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	9c 83       	std	Y+4, r25	; 0x04
    28b0:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;str[i]!='\0';i++){
    28b2:	1a 82       	std	Y+2, r1	; 0x02
    28b4:	19 82       	std	Y+1, r1	; 0x01
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <UART_send_string+0x34>
		UART_send_byte(str[i]);
    28b8:	29 81       	ldd	r18, Y+1	; 0x01
    28ba:	3a 81       	ldd	r19, Y+2	; 0x02
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	9c 81       	ldd	r25, Y+4	; 0x04
    28c0:	fc 01       	movw	r30, r24
    28c2:	e2 0f       	add	r30, r18
    28c4:	f3 1f       	adc	r31, r19
    28c6:	80 81       	ld	r24, Z
    28c8:	0e 94 2b 14 	call	0x2856	; 0x2856 <UART_send_byte>
	return UDR;
}

void UART_send_string(uint8 *str){

	for(int i=0;str[i]!='\0';i++){
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	29 81       	ldd	r18, Y+1	; 0x01
    28d8:	3a 81       	ldd	r19, Y+2	; 0x02
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	fc 01       	movw	r30, r24
    28e0:	e2 0f       	add	r30, r18
    28e2:	f3 1f       	adc	r31, r19
    28e4:	80 81       	ld	r24, Z
    28e6:	88 23       	and	r24, r24
    28e8:	39 f7       	brne	.-50     	; 0x28b8 <UART_send_string+0x16>
		UART_send_byte(str[i]);
	}

}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
	{
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	00 d0       	rcall	.+0      	; 0x2902 <UART_receiveString+0xa>
    2902:	0f 92       	push	r0
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	9b 83       	std	Y+3, r25	; 0x03
    290a:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    290c:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_receive_byte();
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	9b 81       	ldd	r25, Y+3	; 0x03
    2918:	8c 01       	movw	r16, r24
    291a:	02 0f       	add	r16, r18
    291c:	13 1f       	adc	r17, r19
    291e:	0e 94 42 14 	call	0x2884	; 0x2884 <UART_receive_byte>
    2922:	f8 01       	movw	r30, r16
    2924:	80 83       	st	Z, r24
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_receive_byte();
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	9b 81       	ldd	r25, Y+3	; 0x03
    2938:	8c 01       	movw	r16, r24
    293a:	02 0f       	add	r16, r18
    293c:	13 1f       	adc	r17, r19
    293e:	0e 94 42 14 	call	0x2884	; 0x2884 <UART_receive_byte>
    2942:	f8 01       	movw	r30, r16
    2944:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_receive_byte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	fc 01       	movw	r30, r24
    2952:	e2 0f       	add	r30, r18
    2954:	f3 1f       	adc	r31, r19
    2956:	80 81       	ld	r24, Z
    2958:	83 32       	cpi	r24, 0x23	; 35
    295a:	31 f7       	brne	.-52     	; 0x2928 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_receive_byte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	9b 81       	ldd	r25, Y+3	; 0x03
    2966:	fc 01       	movw	r30, r24
    2968:	e2 0f       	add	r30, r18
    296a:	f3 1f       	adc	r31, r19
    296c:	10 82       	st	Z, r1
	}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	08 95       	ret

0000297e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	00 d0       	rcall	.+0      	; 0x2984 <GPIO_setupPinDirection+0x6>
    2984:	00 d0       	rcall	.+0      	; 0x2986 <GPIO_setupPinDirection+0x8>
    2986:	0f 92       	push	r0
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	6a 83       	std	Y+2, r22	; 0x02
    2990:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	88 30       	cpi	r24, 0x08	; 8
    2996:	08 f0       	brcs	.+2      	; 0x299a <GPIO_setupPinDirection+0x1c>
    2998:	d5 c0       	rjmp	.+426    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	84 30       	cpi	r24, 0x04	; 4
    299e:	08 f0       	brcs	.+2      	; 0x29a2 <GPIO_setupPinDirection+0x24>
    29a0:	d1 c0       	rjmp	.+418    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	28 2f       	mov	r18, r24
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	3d 83       	std	Y+5, r19	; 0x05
    29aa:	2c 83       	std	Y+4, r18	; 0x04
    29ac:	8c 81       	ldd	r24, Y+4	; 0x04
    29ae:	9d 81       	ldd	r25, Y+5	; 0x05
    29b0:	81 30       	cpi	r24, 0x01	; 1
    29b2:	91 05       	cpc	r25, r1
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <GPIO_setupPinDirection+0x3a>
    29b6:	43 c0       	rjmp	.+134    	; 0x2a3e <GPIO_setupPinDirection+0xc0>
    29b8:	2c 81       	ldd	r18, Y+4	; 0x04
    29ba:	3d 81       	ldd	r19, Y+5	; 0x05
    29bc:	22 30       	cpi	r18, 0x02	; 2
    29be:	31 05       	cpc	r19, r1
    29c0:	2c f4       	brge	.+10     	; 0x29cc <GPIO_setupPinDirection+0x4e>
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	9d 81       	ldd	r25, Y+5	; 0x05
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	71 f0       	breq	.+28     	; 0x29e6 <GPIO_setupPinDirection+0x68>
    29ca:	bc c0       	rjmp	.+376    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
    29cc:	2c 81       	ldd	r18, Y+4	; 0x04
    29ce:	3d 81       	ldd	r19, Y+5	; 0x05
    29d0:	22 30       	cpi	r18, 0x02	; 2
    29d2:	31 05       	cpc	r19, r1
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <GPIO_setupPinDirection+0x5a>
    29d6:	5f c0       	rjmp	.+190    	; 0x2a96 <GPIO_setupPinDirection+0x118>
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	9d 81       	ldd	r25, Y+5	; 0x05
    29dc:	83 30       	cpi	r24, 0x03	; 3
    29de:	91 05       	cpc	r25, r1
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <GPIO_setupPinDirection+0x66>
    29e2:	85 c0       	rjmp	.+266    	; 0x2aee <GPIO_setupPinDirection+0x170>
    29e4:	af c0       	rjmp	.+350    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	a1 f4       	brne	.+40     	; 0x2a14 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    29ec:	aa e3       	ldi	r26, 0x3A	; 58
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	ea e3       	ldi	r30, 0x3A	; 58
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	48 2f       	mov	r20, r24
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	02 2e       	mov	r0, r18
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <GPIO_setupPinDirection+0x8c>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	0a 94       	dec	r0
    2a0c:	e2 f7       	brpl	.-8      	; 0x2a06 <GPIO_setupPinDirection+0x88>
    2a0e:	84 2b       	or	r24, r20
    2a10:	8c 93       	st	X, r24
    2a12:	98 c0       	rjmp	.+304    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2a14:	aa e3       	ldi	r26, 0x3A	; 58
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ea e3       	ldi	r30, 0x3A	; 58
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <GPIO_setupPinDirection+0xb4>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <GPIO_setupPinDirection+0xb0>
    2a36:	80 95       	com	r24
    2a38:	84 23       	and	r24, r20
    2a3a:	8c 93       	st	X, r24
    2a3c:	83 c0       	rjmp	.+262    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	a1 f4       	brne	.+40     	; 0x2a6c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2a44:	a7 e3       	ldi	r26, 0x37	; 55
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e7 e3       	ldi	r30, 0x37	; 55
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	48 2f       	mov	r20, r24
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	02 2e       	mov	r0, r18
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <GPIO_setupPinDirection+0xe4>
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	0a 94       	dec	r0
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <GPIO_setupPinDirection+0xe0>
    2a66:	84 2b       	or	r24, r20
    2a68:	8c 93       	st	X, r24
    2a6a:	6c c0       	rjmp	.+216    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2a6c:	a7 e3       	ldi	r26, 0x37	; 55
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e7 e3       	ldi	r30, 0x37	; 55
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 2e       	mov	r0, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <GPIO_setupPinDirection+0x10c>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	0a 94       	dec	r0
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <GPIO_setupPinDirection+0x108>
    2a8e:	80 95       	com	r24
    2a90:	84 23       	and	r24, r20
    2a92:	8c 93       	st	X, r24
    2a94:	57 c0       	rjmp	.+174    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	a1 f4       	brne	.+40     	; 0x2ac4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2a9c:	a4 e3       	ldi	r26, 0x34	; 52
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e4 e3       	ldi	r30, 0x34	; 52
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	48 2f       	mov	r20, r24
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	02 2e       	mov	r0, r18
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <GPIO_setupPinDirection+0x13c>
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	0a 94       	dec	r0
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <GPIO_setupPinDirection+0x138>
    2abe:	84 2b       	or	r24, r20
    2ac0:	8c 93       	st	X, r24
    2ac2:	40 c0       	rjmp	.+128    	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2ac4:	a4 e3       	ldi	r26, 0x34	; 52
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e4 e3       	ldi	r30, 0x34	; 52
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	48 2f       	mov	r20, r24
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	02 2e       	mov	r0, r18
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <GPIO_setupPinDirection+0x164>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <GPIO_setupPinDirection+0x160>
    2ae6:	80 95       	com	r24
    2ae8:	84 23       	and	r24, r20
    2aea:	8c 93       	st	X, r24
    2aec:	2b c0       	rjmp	.+86     	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	a1 f4       	brne	.+40     	; 0x2b1c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2af4:	a1 e3       	ldi	r26, 0x31	; 49
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e1 e3       	ldi	r30, 0x31	; 49
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	48 2f       	mov	r20, r24
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	02 2e       	mov	r0, r18
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <GPIO_setupPinDirection+0x194>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	0a 94       	dec	r0
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <GPIO_setupPinDirection+0x190>
    2b16:	84 2b       	or	r24, r20
    2b18:	8c 93       	st	X, r24
    2b1a:	14 c0       	rjmp	.+40     	; 0x2b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2b1c:	a1 e3       	ldi	r26, 0x31	; 49
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e1 e3       	ldi	r30, 0x31	; 49
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	48 2f       	mov	r20, r24
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	02 2e       	mov	r0, r18
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <GPIO_setupPinDirection+0x1bc>
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	0a 94       	dec	r0
    2b3c:	e2 f7       	brpl	.-8      	; 0x2b36 <GPIO_setupPinDirection+0x1b8>
    2b3e:	80 95       	com	r24
    2b40:	84 23       	and	r24, r20
    2b42:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <GPIO_writePin+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <GPIO_writePin+0x8>
    2b5c:	0f 92       	push	r0
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	6a 83       	std	Y+2, r22	; 0x02
    2b66:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	88 30       	cpi	r24, 0x08	; 8
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <GPIO_writePin+0x1c>
    2b6e:	d5 c0       	rjmp	.+426    	; 0x2d1a <GPIO_writePin+0x1c6>
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	84 30       	cpi	r24, 0x04	; 4
    2b74:	08 f0       	brcs	.+2      	; 0x2b78 <GPIO_writePin+0x24>
    2b76:	d1 c0       	rjmp	.+418    	; 0x2d1a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	3d 83       	std	Y+5, r19	; 0x05
    2b80:	2c 83       	std	Y+4, r18	; 0x04
    2b82:	8c 81       	ldd	r24, Y+4	; 0x04
    2b84:	9d 81       	ldd	r25, Y+5	; 0x05
    2b86:	81 30       	cpi	r24, 0x01	; 1
    2b88:	91 05       	cpc	r25, r1
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <GPIO_writePin+0x3a>
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <GPIO_writePin+0xc0>
    2b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b90:	3d 81       	ldd	r19, Y+5	; 0x05
    2b92:	22 30       	cpi	r18, 0x02	; 2
    2b94:	31 05       	cpc	r19, r1
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <GPIO_writePin+0x4e>
    2b98:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	71 f0       	breq	.+28     	; 0x2bbc <GPIO_writePin+0x68>
    2ba0:	bc c0       	rjmp	.+376    	; 0x2d1a <GPIO_writePin+0x1c6>
    2ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba6:	22 30       	cpi	r18, 0x02	; 2
    2ba8:	31 05       	cpc	r19, r1
    2baa:	09 f4       	brne	.+2      	; 0x2bae <GPIO_writePin+0x5a>
    2bac:	5f c0       	rjmp	.+190    	; 0x2c6c <GPIO_writePin+0x118>
    2bae:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb2:	83 30       	cpi	r24, 0x03	; 3
    2bb4:	91 05       	cpc	r25, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <GPIO_writePin+0x66>
    2bb8:	85 c0       	rjmp	.+266    	; 0x2cc4 <GPIO_writePin+0x170>
    2bba:	af c0       	rjmp	.+350    	; 0x2d1a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	a1 f4       	brne	.+40     	; 0x2bea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2bc2:	ab e3       	ldi	r26, 0x3B	; 59
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	eb e3       	ldi	r30, 0x3B	; 59
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	48 2f       	mov	r20, r24
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	02 2e       	mov	r0, r18
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <GPIO_writePin+0x8c>
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	0a 94       	dec	r0
    2be2:	e2 f7       	brpl	.-8      	; 0x2bdc <GPIO_writePin+0x88>
    2be4:	84 2b       	or	r24, r20
    2be6:	8c 93       	st	X, r24
    2be8:	98 c0       	rjmp	.+304    	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2bea:	ab e3       	ldi	r26, 0x3B	; 59
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	eb e3       	ldi	r30, 0x3B	; 59
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	48 2f       	mov	r20, r24
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	02 2e       	mov	r0, r18
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <GPIO_writePin+0xb4>
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	0a 94       	dec	r0
    2c0a:	e2 f7       	brpl	.-8      	; 0x2c04 <GPIO_writePin+0xb0>
    2c0c:	80 95       	com	r24
    2c0e:	84 23       	and	r24, r20
    2c10:	8c 93       	st	X, r24
    2c12:	83 c0       	rjmp	.+262    	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	81 30       	cpi	r24, 0x01	; 1
    2c18:	a1 f4       	brne	.+40     	; 0x2c42 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2c1a:	a8 e3       	ldi	r26, 0x38	; 56
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e8 e3       	ldi	r30, 0x38	; 56
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 2e       	mov	r0, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <GPIO_writePin+0xe4>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	0a 94       	dec	r0
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <GPIO_writePin+0xe0>
    2c3c:	84 2b       	or	r24, r20
    2c3e:	8c 93       	st	X, r24
    2c40:	6c c0       	rjmp	.+216    	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2c42:	a8 e3       	ldi	r26, 0x38	; 56
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e8 e3       	ldi	r30, 0x38	; 56
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	02 2e       	mov	r0, r18
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <GPIO_writePin+0x10c>
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	0a 94       	dec	r0
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <GPIO_writePin+0x108>
    2c64:	80 95       	com	r24
    2c66:	84 23       	and	r24, r20
    2c68:	8c 93       	st	X, r24
    2c6a:	57 c0       	rjmp	.+174    	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	a1 f4       	brne	.+40     	; 0x2c9a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2c72:	a5 e3       	ldi	r26, 0x35	; 53
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e5 e3       	ldi	r30, 0x35	; 53
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	48 2f       	mov	r20, r24
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	02 2e       	mov	r0, r18
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <GPIO_writePin+0x13c>
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	0a 94       	dec	r0
    2c92:	e2 f7       	brpl	.-8      	; 0x2c8c <GPIO_writePin+0x138>
    2c94:	84 2b       	or	r24, r20
    2c96:	8c 93       	st	X, r24
    2c98:	40 c0       	rjmp	.+128    	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2c9a:	a5 e3       	ldi	r26, 0x35	; 53
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	48 2f       	mov	r20, r24
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	02 2e       	mov	r0, r18
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <GPIO_writePin+0x164>
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	0a 94       	dec	r0
    2cba:	e2 f7       	brpl	.-8      	; 0x2cb4 <GPIO_writePin+0x160>
    2cbc:	80 95       	com	r24
    2cbe:	84 23       	and	r24, r20
    2cc0:	8c 93       	st	X, r24
    2cc2:	2b c0       	rjmp	.+86     	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	a1 f4       	brne	.+40     	; 0x2cf2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2cca:	a2 e3       	ldi	r26, 0x32	; 50
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e2 e3       	ldi	r30, 0x32	; 50
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	48 2f       	mov	r20, r24
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	02 2e       	mov	r0, r18
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <GPIO_writePin+0x194>
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	0a 94       	dec	r0
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <GPIO_writePin+0x190>
    2cec:	84 2b       	or	r24, r20
    2cee:	8c 93       	st	X, r24
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2cf2:	a2 e3       	ldi	r26, 0x32	; 50
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e2 e3       	ldi	r30, 0x32	; 50
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	48 2f       	mov	r20, r24
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	02 2e       	mov	r0, r18
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <GPIO_writePin+0x1bc>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	0a 94       	dec	r0
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <GPIO_writePin+0x1b8>
    2d14:	80 95       	com	r24
    2d16:	84 23       	and	r24, r20
    2d18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <GPIO_readPin+0x6>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <GPIO_readPin+0x8>
    2d32:	0f 92       	push	r0
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	8a 83       	std	Y+2, r24	; 0x02
    2d3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	88 30       	cpi	r24, 0x08	; 8
    2d42:	08 f0       	brcs	.+2      	; 0x2d46 <GPIO_readPin+0x1c>
    2d44:	84 c0       	rjmp	.+264    	; 0x2e4e <GPIO_readPin+0x124>
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	84 30       	cpi	r24, 0x04	; 4
    2d4a:	08 f0       	brcs	.+2      	; 0x2d4e <GPIO_readPin+0x24>
    2d4c:	80 c0       	rjmp	.+256    	; 0x2e4e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	3d 83       	std	Y+5, r19	; 0x05
    2d56:	2c 83       	std	Y+4, r18	; 0x04
    2d58:	4c 81       	ldd	r20, Y+4	; 0x04
    2d5a:	5d 81       	ldd	r21, Y+5	; 0x05
    2d5c:	41 30       	cpi	r20, 0x01	; 1
    2d5e:	51 05       	cpc	r21, r1
    2d60:	79 f1       	breq	.+94     	; 0x2dc0 <GPIO_readPin+0x96>
    2d62:	8c 81       	ldd	r24, Y+4	; 0x04
    2d64:	9d 81       	ldd	r25, Y+5	; 0x05
    2d66:	82 30       	cpi	r24, 0x02	; 2
    2d68:	91 05       	cpc	r25, r1
    2d6a:	34 f4       	brge	.+12     	; 0x2d78 <GPIO_readPin+0x4e>
    2d6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d70:	21 15       	cp	r18, r1
    2d72:	31 05       	cpc	r19, r1
    2d74:	69 f0       	breq	.+26     	; 0x2d90 <GPIO_readPin+0x66>
    2d76:	6b c0       	rjmp	.+214    	; 0x2e4e <GPIO_readPin+0x124>
    2d78:	4c 81       	ldd	r20, Y+4	; 0x04
    2d7a:	5d 81       	ldd	r21, Y+5	; 0x05
    2d7c:	42 30       	cpi	r20, 0x02	; 2
    2d7e:	51 05       	cpc	r21, r1
    2d80:	b9 f1       	breq	.+110    	; 0x2df0 <GPIO_readPin+0xc6>
    2d82:	8c 81       	ldd	r24, Y+4	; 0x04
    2d84:	9d 81       	ldd	r25, Y+5	; 0x05
    2d86:	83 30       	cpi	r24, 0x03	; 3
    2d88:	91 05       	cpc	r25, r1
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <GPIO_readPin+0x64>
    2d8c:	49 c0       	rjmp	.+146    	; 0x2e20 <GPIO_readPin+0xf6>
    2d8e:	5f c0       	rjmp	.+190    	; 0x2e4e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2d90:	e9 e3       	ldi	r30, 0x39	; 57
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a9 01       	movw	r20, r18
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <GPIO_readPin+0x7e>
    2da4:	55 95       	asr	r21
    2da6:	47 95       	ror	r20
    2da8:	8a 95       	dec	r24
    2daa:	e2 f7       	brpl	.-8      	; 0x2da4 <GPIO_readPin+0x7a>
    2dac:	ca 01       	movw	r24, r20
    2dae:	81 70       	andi	r24, 0x01	; 1
    2db0:	90 70       	andi	r25, 0x00	; 0
    2db2:	88 23       	and	r24, r24
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	49 c0       	rjmp	.+146    	; 0x2e4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2dbc:	19 82       	std	Y+1, r1	; 0x01
    2dbe:	47 c0       	rjmp	.+142    	; 0x2e4e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2dc0:	e6 e3       	ldi	r30, 0x36	; 54
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a9 01       	movw	r20, r18
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <GPIO_readPin+0xae>
    2dd4:	55 95       	asr	r21
    2dd6:	47 95       	ror	r20
    2dd8:	8a 95       	dec	r24
    2dda:	e2 f7       	brpl	.-8      	; 0x2dd4 <GPIO_readPin+0xaa>
    2ddc:	ca 01       	movw	r24, r20
    2dde:	81 70       	andi	r24, 0x01	; 1
    2de0:	90 70       	andi	r25, 0x00	; 0
    2de2:	88 23       	and	r24, r24
    2de4:	19 f0       	breq	.+6      	; 0x2dec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	31 c0       	rjmp	.+98     	; 0x2e4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2dec:	19 82       	std	Y+1, r1	; 0x01
    2dee:	2f c0       	rjmp	.+94     	; 0x2e4e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2df0:	e3 e3       	ldi	r30, 0x33	; 51
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	a9 01       	movw	r20, r18
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <GPIO_readPin+0xde>
    2e04:	55 95       	asr	r21
    2e06:	47 95       	ror	r20
    2e08:	8a 95       	dec	r24
    2e0a:	e2 f7       	brpl	.-8      	; 0x2e04 <GPIO_readPin+0xda>
    2e0c:	ca 01       	movw	r24, r20
    2e0e:	81 70       	andi	r24, 0x01	; 1
    2e10:	90 70       	andi	r25, 0x00	; 0
    2e12:	88 23       	and	r24, r24
    2e14:	19 f0       	breq	.+6      	; 0x2e1c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	19 c0       	rjmp	.+50     	; 0x2e4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e1c:	19 82       	std	Y+1, r1	; 0x01
    2e1e:	17 c0       	rjmp	.+46     	; 0x2e4e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2e20:	e0 e3       	ldi	r30, 0x30	; 48
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	28 2f       	mov	r18, r24
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a9 01       	movw	r20, r18
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <GPIO_readPin+0x10e>
    2e34:	55 95       	asr	r21
    2e36:	47 95       	ror	r20
    2e38:	8a 95       	dec	r24
    2e3a:	e2 f7       	brpl	.-8      	; 0x2e34 <GPIO_readPin+0x10a>
    2e3c:	ca 01       	movw	r24, r20
    2e3e:	81 70       	andi	r24, 0x01	; 1
    2e40:	90 70       	andi	r25, 0x00	; 0
    2e42:	88 23       	and	r24, r24
    2e44:	19 f0       	breq	.+6      	; 0x2e4c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	01 c0       	rjmp	.+2      	; 0x2e4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e4c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <GPIO_setupPortDirection+0x6>
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <GPIO_setupPortDirection+0x8>
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	84 30       	cpi	r24, 0x04	; 4
    2e74:	90 f5       	brcc	.+100    	; 0x2eda <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	3c 83       	std	Y+4, r19	; 0x04
    2e7e:	2b 83       	std	Y+3, r18	; 0x03
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	91 05       	cpc	r25, r1
    2e88:	d1 f0       	breq	.+52     	; 0x2ebe <GPIO_setupPortDirection+0x5e>
    2e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e8e:	22 30       	cpi	r18, 0x02	; 2
    2e90:	31 05       	cpc	r19, r1
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <GPIO_setupPortDirection+0x3e>
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	61 f0       	breq	.+24     	; 0x2eb4 <GPIO_setupPortDirection+0x54>
    2e9c:	1e c0       	rjmp	.+60     	; 0x2eda <GPIO_setupPortDirection+0x7a>
    2e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea2:	22 30       	cpi	r18, 0x02	; 2
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	81 f0       	breq	.+32     	; 0x2ec8 <GPIO_setupPortDirection+0x68>
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	83 30       	cpi	r24, 0x03	; 3
    2eae:	91 05       	cpc	r25, r1
    2eb0:	81 f0       	breq	.+32     	; 0x2ed2 <GPIO_setupPortDirection+0x72>
    2eb2:	13 c0       	rjmp	.+38     	; 0x2eda <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2eb4:	ea e3       	ldi	r30, 0x3A	; 58
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	80 83       	st	Z, r24
    2ebc:	0e c0       	rjmp	.+28     	; 0x2eda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2ebe:	e7 e3       	ldi	r30, 0x37	; 55
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	80 83       	st	Z, r24
    2ec6:	09 c0       	rjmp	.+18     	; 0x2eda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2ec8:	e4 e3       	ldi	r30, 0x34	; 52
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	80 83       	st	Z, r24
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2ed2:	e1 e3       	ldi	r30, 0x31	; 49
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	80 83       	st	Z, r24
			break;
		}
	}
}
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <GPIO_writePort+0x6>
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <GPIO_writePort+0x8>
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	84 30       	cpi	r24, 0x04	; 4
    2efc:	90 f5       	brcc	.+100    	; 0x2f62 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	3c 83       	std	Y+4, r19	; 0x04
    2f06:	2b 83       	std	Y+3, r18	; 0x03
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	91 05       	cpc	r25, r1
    2f10:	d1 f0       	breq	.+52     	; 0x2f46 <GPIO_writePort+0x5e>
    2f12:	2b 81       	ldd	r18, Y+3	; 0x03
    2f14:	3c 81       	ldd	r19, Y+4	; 0x04
    2f16:	22 30       	cpi	r18, 0x02	; 2
    2f18:	31 05       	cpc	r19, r1
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <GPIO_writePort+0x3e>
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	61 f0       	breq	.+24     	; 0x2f3c <GPIO_writePort+0x54>
    2f24:	1e c0       	rjmp	.+60     	; 0x2f62 <GPIO_writePort+0x7a>
    2f26:	2b 81       	ldd	r18, Y+3	; 0x03
    2f28:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2a:	22 30       	cpi	r18, 0x02	; 2
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	81 f0       	breq	.+32     	; 0x2f50 <GPIO_writePort+0x68>
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	83 30       	cpi	r24, 0x03	; 3
    2f36:	91 05       	cpc	r25, r1
    2f38:	81 f0       	breq	.+32     	; 0x2f5a <GPIO_writePort+0x72>
    2f3a:	13 c0       	rjmp	.+38     	; 0x2f62 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2f3c:	eb e3       	ldi	r30, 0x3B	; 59
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	80 83       	st	Z, r24
    2f44:	0e c0       	rjmp	.+28     	; 0x2f62 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f46:	e8 e3       	ldi	r30, 0x38	; 56
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	80 83       	st	Z, r24
    2f4e:	09 c0       	rjmp	.+18     	; 0x2f62 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f50:	e5 e3       	ldi	r30, 0x35	; 53
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	80 83       	st	Z, r24
    2f58:	04 c0       	rjmp	.+8      	; 0x2f62 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f5a:	e2 e3       	ldi	r30, 0x32	; 50
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	80 83       	st	Z, r24
			break;
		}
	}
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <GPIO_readPort+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <GPIO_readPort+0x8>
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2f7e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	84 30       	cpi	r24, 0x04	; 4
    2f84:	90 f5       	brcc	.+100    	; 0x2fea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	3c 83       	std	Y+4, r19	; 0x04
    2f8e:	2b 83       	std	Y+3, r18	; 0x03
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	91 05       	cpc	r25, r1
    2f98:	d1 f0       	breq	.+52     	; 0x2fce <GPIO_readPort+0x5e>
    2f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f9e:	22 30       	cpi	r18, 0x02	; 2
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	2c f4       	brge	.+10     	; 0x2fae <GPIO_readPort+0x3e>
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	61 f0       	breq	.+24     	; 0x2fc4 <GPIO_readPort+0x54>
    2fac:	1e c0       	rjmp	.+60     	; 0x2fea <GPIO_readPort+0x7a>
    2fae:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2fb2:	22 30       	cpi	r18, 0x02	; 2
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	81 f0       	breq	.+32     	; 0x2fd8 <GPIO_readPort+0x68>
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	83 30       	cpi	r24, 0x03	; 3
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	81 f0       	breq	.+32     	; 0x2fe2 <GPIO_readPort+0x72>
    2fc2:	13 c0       	rjmp	.+38     	; 0x2fea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2fc4:	e9 e3       	ldi	r30, 0x39	; 57
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	0e c0       	rjmp	.+28     	; 0x2fea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2fce:	e6 e3       	ldi	r30, 0x36	; 54
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	89 83       	std	Y+1, r24	; 0x01
    2fd6:	09 c0       	rjmp	.+18     	; 0x2fea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2fd8:	e3 e3       	ldi	r30, 0x33	; 51
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	04 c0       	rjmp	.+8      	; 0x2fea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fe2:	e0 e3       	ldi	r30, 0x30	; 48
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <KEYPAD_getPressedKey>:
#include "avr/delay.h"
#include "gpio.h"
uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	64 97       	sbiw	r28, 0x14	; 20
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    300e:	1c 8a       	std	Y+20, r1	; 0x14
    3010:	1b 8a       	std	Y+19, r1	; 0x13
    3012:	0d c0       	rjmp	.+26     	; 0x302e <KEYPAD_getPressedKey+0x34>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i,PIN_INPUT);
    3014:	8b 89       	ldd	r24, Y+19	; 0x13
    3016:	98 2f       	mov	r25, r24
    3018:	9c 5f       	subi	r25, 0xFC	; 252
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	69 2f       	mov	r22, r25
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	0e 94 bf 14 	call	0x297e	; 0x297e <GPIO_setupPinDirection>
uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
    302e:	8b 89       	ldd	r24, Y+19	; 0x13
    3030:	9c 89       	ldd	r25, Y+20	; 0x14
    3032:	84 30       	cpi	r24, 0x04	; 4
    3034:	91 05       	cpc	r25, r1
    3036:	74 f3       	brlt	.-36     	; 0x3014 <KEYPAD_getPressedKey+0x1a>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a8 e4       	ldi	r26, 0x48	; 72
    303e:	b2 e4       	ldi	r27, 0x42	; 66
    3040:	8b 87       	std	Y+11, r24	; 0x0b
    3042:	9c 87       	std	Y+12, r25	; 0x0c
    3044:	ad 87       	std	Y+13, r26	; 0x0d
    3046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	a9 87       	std	Y+9, r26	; 0x09
    3066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <KEYPAD_getPressedKey+0x90>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <KEYPAD_getPressedKey+0x10e>
	else if (__tmp > 65535)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <KEYPAD_getPressedKey+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <KEYPAD_getPressedKey+0xf0>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <KEYPAD_getPressedKey+0xde>
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <KEYPAD_getPressedKey+0xd2>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <KEYPAD_getPressedKey+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <KEYPAD_getPressedKey+0x11a>
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i,PIN_INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    311c:	1a 8a       	std	Y+18, r1	; 0x12
    311e:	19 8a       	std	Y+17, r1	; 0x11
    3120:	48 c0       	rjmp	.+144    	; 0x31b2 <KEYPAD_getPressedKey+0x1b8>
		{
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_OUTPUT);
    3122:	99 89       	ldd	r25, Y+17	; 0x11
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	69 2f       	mov	r22, r25
    3128:	41 e0       	ldi	r20, 0x01	; 1
    312a:	0e 94 bf 14 	call	0x297e	; 0x297e <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);
    312e:	99 89       	ldd	r25, Y+17	; 0x11
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	69 2f       	mov	r22, r25
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <GPIO_writePin>

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    313a:	18 8a       	std	Y+16, r1	; 0x10
    313c:	1f 86       	std	Y+15, r1	; 0x0f
    313e:	29 c0       	rjmp	.+82     	; 0x3192 <KEYPAD_getPressedKey+0x198>
			{
			 if(GPIO_readPin(KEYPAD_COL_PORT_ID , KEYPAD_COL_START_PIN_ID+col) == BUTTON_IS_PRESSED )
    3140:	8f 85       	ldd	r24, Y+15	; 0x0f
    3142:	98 2f       	mov	r25, r24
    3144:	9c 5f       	subi	r25, 0xFC	; 252
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	69 2f       	mov	r22, r25
    314a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <GPIO_readPin>
    314e:	88 23       	and	r24, r24
    3150:	d9 f4       	brne	.+54     	; 0x3188 <KEYPAD_getPressedKey+0x18e>
			 {
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
    3152:	99 89       	ldd	r25, Y+17	; 0x11
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	69 2f       	mov	r22, r25
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	0e 94 bf 14 	call	0x297e	; 0x297e <GPIO_setupPinDirection>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
    315e:	89 89       	ldd	r24, Y+17	; 0x11
    3160:	9a 89       	ldd	r25, Y+18	; 0x12
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	98 2f       	mov	r25, r24
    316c:	8f 85       	ldd	r24, Y+15	; 0x0f
    316e:	89 0f       	add	r24, r25
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <KEYPAD_adjustKeyNumber>
			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
		}
}
}
    3176:	64 96       	adiw	r28, 0x14	; 20
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    3188:	8f 85       	ldd	r24, Y+15	; 0x0f
    318a:	98 89       	ldd	r25, Y+16	; 0x10
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	98 8b       	std	Y+16, r25	; 0x10
    3190:	8f 87       	std	Y+15, r24	; 0x0f
    3192:	8f 85       	ldd	r24, Y+15	; 0x0f
    3194:	98 89       	ldd	r25, Y+16	; 0x10
    3196:	84 30       	cpi	r24, 0x04	; 4
    3198:	91 05       	cpc	r25, r1
    319a:	94 f2       	brlt	.-92     	; 0x3140 <KEYPAD_getPressedKey+0x146>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
			 }

			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
    319c:	99 89       	ldd	r25, Y+17	; 0x11
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	69 2f       	mov	r22, r25
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	0e 94 bf 14 	call	0x297e	; 0x297e <GPIO_setupPinDirection>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i,PIN_INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    31a8:	89 89       	ldd	r24, Y+17	; 0x11
    31aa:	9a 89       	ldd	r25, Y+18	; 0x12
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	9a 8b       	std	Y+18, r25	; 0x12
    31b0:	89 8b       	std	Y+17, r24	; 0x11
    31b2:	89 89       	ldd	r24, Y+17	; 0x11
    31b4:	9a 89       	ldd	r25, Y+18	; 0x12
    31b6:	84 30       	cpi	r24, 0x04	; 4
    31b8:	91 05       	cpc	r25, r1
    31ba:	0c f4       	brge	.+2      	; 0x31be <KEYPAD_getPressedKey+0x1c4>
    31bc:	b2 cf       	rjmp	.-156    	; 0x3122 <KEYPAD_getPressedKey+0x128>
    31be:	3c cf       	rjmp	.-392    	; 0x3038 <KEYPAD_getPressedKey+0x3e>

000031c0 <KEYPAD_adjustKeyNumber>:
}
}


uint8 KEYPAD_adjustKeyNumber(uint8 button_num)
{
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	00 d0       	rcall	.+0      	; 0x31c6 <KEYPAD_adjustKeyNumber+0x6>
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <KEYPAD_adjustKeyNumber+0x8>
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 adjustNum=0;
    31ce:	19 82       	std	Y+1, r1	; 0x01
	switch(button_num)
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	3c 83       	std	Y+4, r19	; 0x04
    31d8:	2b 83       	std	Y+3, r18	; 0x03
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	9c 81       	ldd	r25, Y+4	; 0x04
    31de:	88 30       	cpi	r24, 0x08	; 8
    31e0:	91 05       	cpc	r25, r1
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <KEYPAD_adjustKeyNumber+0x26>
    31e4:	70 c0       	rjmp	.+224    	; 0x32c6 <KEYPAD_adjustKeyNumber+0x106>
    31e6:	2b 81       	ldd	r18, Y+3	; 0x03
    31e8:	3c 81       	ldd	r19, Y+4	; 0x04
    31ea:	29 30       	cpi	r18, 0x09	; 9
    31ec:	31 05       	cpc	r19, r1
    31ee:	5c f5       	brge	.+86     	; 0x3246 <KEYPAD_adjustKeyNumber+0x86>
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	84 30       	cpi	r24, 0x04	; 4
    31f6:	91 05       	cpc	r25, r1
    31f8:	09 f4       	brne	.+2      	; 0x31fc <KEYPAD_adjustKeyNumber+0x3c>
    31fa:	59 c0       	rjmp	.+178    	; 0x32ae <KEYPAD_adjustKeyNumber+0xee>
    31fc:	2b 81       	ldd	r18, Y+3	; 0x03
    31fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3200:	25 30       	cpi	r18, 0x05	; 5
    3202:	31 05       	cpc	r19, r1
    3204:	9c f4       	brge	.+38     	; 0x322c <KEYPAD_adjustKeyNumber+0x6c>
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	82 30       	cpi	r24, 0x02	; 2
    320c:	91 05       	cpc	r25, r1
    320e:	09 f4       	brne	.+2      	; 0x3212 <KEYPAD_adjustKeyNumber+0x52>
    3210:	48 c0       	rjmp	.+144    	; 0x32a2 <KEYPAD_adjustKeyNumber+0xe2>
    3212:	2b 81       	ldd	r18, Y+3	; 0x03
    3214:	3c 81       	ldd	r19, Y+4	; 0x04
    3216:	23 30       	cpi	r18, 0x03	; 3
    3218:	31 05       	cpc	r19, r1
    321a:	0c f0       	brlt	.+2      	; 0x321e <KEYPAD_adjustKeyNumber+0x5e>
    321c:	45 c0       	rjmp	.+138    	; 0x32a8 <KEYPAD_adjustKeyNumber+0xe8>
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	81 30       	cpi	r24, 0x01	; 1
    3224:	91 05       	cpc	r25, r1
    3226:	09 f4       	brne	.+2      	; 0x322a <KEYPAD_adjustKeyNumber+0x6a>
    3228:	39 c0       	rjmp	.+114    	; 0x329c <KEYPAD_adjustKeyNumber+0xdc>
    322a:	66 c0       	rjmp	.+204    	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
    322c:	2b 81       	ldd	r18, Y+3	; 0x03
    322e:	3c 81       	ldd	r19, Y+4	; 0x04
    3230:	26 30       	cpi	r18, 0x06	; 6
    3232:	31 05       	cpc	r19, r1
    3234:	09 f4       	brne	.+2      	; 0x3238 <KEYPAD_adjustKeyNumber+0x78>
    3236:	41 c0       	rjmp	.+130    	; 0x32ba <KEYPAD_adjustKeyNumber+0xfa>
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	87 30       	cpi	r24, 0x07	; 7
    323e:	91 05       	cpc	r25, r1
    3240:	0c f0       	brlt	.+2      	; 0x3244 <KEYPAD_adjustKeyNumber+0x84>
    3242:	3e c0       	rjmp	.+124    	; 0x32c0 <KEYPAD_adjustKeyNumber+0x100>
    3244:	37 c0       	rjmp	.+110    	; 0x32b4 <KEYPAD_adjustKeyNumber+0xf4>
    3246:	2b 81       	ldd	r18, Y+3	; 0x03
    3248:	3c 81       	ldd	r19, Y+4	; 0x04
    324a:	2c 30       	cpi	r18, 0x0C	; 12
    324c:	31 05       	cpc	r19, r1
    324e:	09 f4       	brne	.+2      	; 0x3252 <KEYPAD_adjustKeyNumber+0x92>
    3250:	46 c0       	rjmp	.+140    	; 0x32de <KEYPAD_adjustKeyNumber+0x11e>
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	8d 30       	cpi	r24, 0x0D	; 13
    3258:	91 05       	cpc	r25, r1
    325a:	5c f4       	brge	.+22     	; 0x3272 <KEYPAD_adjustKeyNumber+0xb2>
    325c:	2b 81       	ldd	r18, Y+3	; 0x03
    325e:	3c 81       	ldd	r19, Y+4	; 0x04
    3260:	2a 30       	cpi	r18, 0x0A	; 10
    3262:	31 05       	cpc	r19, r1
    3264:	b1 f1       	breq	.+108    	; 0x32d2 <KEYPAD_adjustKeyNumber+0x112>
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	8b 30       	cpi	r24, 0x0B	; 11
    326c:	91 05       	cpc	r25, r1
    326e:	a4 f5       	brge	.+104    	; 0x32d8 <KEYPAD_adjustKeyNumber+0x118>
    3270:	2d c0       	rjmp	.+90     	; 0x32cc <KEYPAD_adjustKeyNumber+0x10c>
    3272:	2b 81       	ldd	r18, Y+3	; 0x03
    3274:	3c 81       	ldd	r19, Y+4	; 0x04
    3276:	2e 30       	cpi	r18, 0x0E	; 14
    3278:	31 05       	cpc	r19, r1
    327a:	b9 f1       	breq	.+110    	; 0x32ea <KEYPAD_adjustKeyNumber+0x12a>
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	8e 30       	cpi	r24, 0x0E	; 14
    3282:	91 05       	cpc	r25, r1
    3284:	7c f1       	brlt	.+94     	; 0x32e4 <KEYPAD_adjustKeyNumber+0x124>
    3286:	2b 81       	ldd	r18, Y+3	; 0x03
    3288:	3c 81       	ldd	r19, Y+4	; 0x04
    328a:	2f 30       	cpi	r18, 0x0F	; 15
    328c:	31 05       	cpc	r19, r1
    328e:	79 f1       	breq	.+94     	; 0x32ee <KEYPAD_adjustKeyNumber+0x12e>
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	80 31       	cpi	r24, 0x10	; 16
    3296:	91 05       	cpc	r25, r1
    3298:	69 f1       	breq	.+90     	; 0x32f4 <KEYPAD_adjustKeyNumber+0x134>
    329a:	2e c0       	rjmp	.+92     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
	{
	case 1:
			adjustNum = BUTTON1;
    329c:	87 e0       	ldi	r24, 0x07	; 7
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	2b c0       	rjmp	.+86     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 2:
			adjustNum = BUTTON2;
    32a2:	88 e0       	ldi	r24, 0x08	; 8
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	28 c0       	rjmp	.+80     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 3:
			adjustNum = BUTTON3;
    32a8:	89 e0       	ldi	r24, 0x09	; 9
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	25 c0       	rjmp	.+74     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 4:
			adjustNum = BUTTON4;
    32ae:	8f e2       	ldi	r24, 0x2F	; 47
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	22 c0       	rjmp	.+68     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 5:
			adjustNum = BUTTON5;
    32b4:	84 e0       	ldi	r24, 0x04	; 4
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	1f c0       	rjmp	.+62     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 6:
			adjustNum = BUTTON6;
    32ba:	85 e0       	ldi	r24, 0x05	; 5
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	1c c0       	rjmp	.+56     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 7:
			adjustNum = BUTTON7;
    32c0:	86 e0       	ldi	r24, 0x06	; 6
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	19 c0       	rjmp	.+50     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 8:
			adjustNum = BUTTON8;
    32c6:	8a e2       	ldi	r24, 0x2A	; 42
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	16 c0       	rjmp	.+44     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 9:
			adjustNum = BUTTON9;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	13 c0       	rjmp	.+38     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 10:
			adjustNum = BUTTON10;
    32d2:	82 e0       	ldi	r24, 0x02	; 2
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	10 c0       	rjmp	.+32     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 11:
			adjustNum = BUTTON11;
    32d8:	83 e0       	ldi	r24, 0x03	; 3
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	0d c0       	rjmp	.+26     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 12:
			adjustNum = BUTTON12;
    32de:	8d e2       	ldi	r24, 0x2D	; 45
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	0a c0       	rjmp	.+20     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 13:
			adjustNum = BUTTON13;
    32e4:	8d e0       	ldi	r24, 0x0D	; 13
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	07 c0       	rjmp	.+14     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 14:
			adjustNum = BUTTON14;
    32ea:	19 82       	std	Y+1, r1	; 0x01
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 15:
			adjustNum = BUTTON15;
    32ee:	8d e3       	ldi	r24, 0x3D	; 61
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 16:
			adjustNum = BUTTON16;
    32f4:	8b e2       	ldi	r24, 0x2B	; 43
    32f6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return adjustNum;
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <__udivmodsi4>:
    3308:	a1 e2       	ldi	r26, 0x21	; 33
    330a:	1a 2e       	mov	r1, r26
    330c:	aa 1b       	sub	r26, r26
    330e:	bb 1b       	sub	r27, r27
    3310:	fd 01       	movw	r30, r26
    3312:	0d c0       	rjmp	.+26     	; 0x332e <__udivmodsi4_ep>

00003314 <__udivmodsi4_loop>:
    3314:	aa 1f       	adc	r26, r26
    3316:	bb 1f       	adc	r27, r27
    3318:	ee 1f       	adc	r30, r30
    331a:	ff 1f       	adc	r31, r31
    331c:	a2 17       	cp	r26, r18
    331e:	b3 07       	cpc	r27, r19
    3320:	e4 07       	cpc	r30, r20
    3322:	f5 07       	cpc	r31, r21
    3324:	20 f0       	brcs	.+8      	; 0x332e <__udivmodsi4_ep>
    3326:	a2 1b       	sub	r26, r18
    3328:	b3 0b       	sbc	r27, r19
    332a:	e4 0b       	sbc	r30, r20
    332c:	f5 0b       	sbc	r31, r21

0000332e <__udivmodsi4_ep>:
    332e:	66 1f       	adc	r22, r22
    3330:	77 1f       	adc	r23, r23
    3332:	88 1f       	adc	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	1a 94       	dec	r1
    3338:	69 f7       	brne	.-38     	; 0x3314 <__udivmodsi4_loop>
    333a:	60 95       	com	r22
    333c:	70 95       	com	r23
    333e:	80 95       	com	r24
    3340:	90 95       	com	r25
    3342:	9b 01       	movw	r18, r22
    3344:	ac 01       	movw	r20, r24
    3346:	bd 01       	movw	r22, r26
    3348:	cf 01       	movw	r24, r30
    334a:	08 95       	ret

0000334c <__prologue_saves__>:
    334c:	2f 92       	push	r2
    334e:	3f 92       	push	r3
    3350:	4f 92       	push	r4
    3352:	5f 92       	push	r5
    3354:	6f 92       	push	r6
    3356:	7f 92       	push	r7
    3358:	8f 92       	push	r8
    335a:	9f 92       	push	r9
    335c:	af 92       	push	r10
    335e:	bf 92       	push	r11
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	ca 1b       	sub	r28, r26
    3376:	db 0b       	sbc	r29, r27
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	09 94       	ijmp

00003384 <__epilogue_restores__>:
    3384:	2a 88       	ldd	r2, Y+18	; 0x12
    3386:	39 88       	ldd	r3, Y+17	; 0x11
    3388:	48 88       	ldd	r4, Y+16	; 0x10
    338a:	5f 84       	ldd	r5, Y+15	; 0x0f
    338c:	6e 84       	ldd	r6, Y+14	; 0x0e
    338e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3390:	8c 84       	ldd	r8, Y+12	; 0x0c
    3392:	9b 84       	ldd	r9, Y+11	; 0x0b
    3394:	aa 84       	ldd	r10, Y+10	; 0x0a
    3396:	b9 84       	ldd	r11, Y+9	; 0x09
    3398:	c8 84       	ldd	r12, Y+8	; 0x08
    339a:	df 80       	ldd	r13, Y+7	; 0x07
    339c:	ee 80       	ldd	r14, Y+6	; 0x06
    339e:	fd 80       	ldd	r15, Y+5	; 0x05
    33a0:	0c 81       	ldd	r16, Y+4	; 0x04
    33a2:	1b 81       	ldd	r17, Y+3	; 0x03
    33a4:	aa 81       	ldd	r26, Y+2	; 0x02
    33a6:	b9 81       	ldd	r27, Y+1	; 0x01
    33a8:	ce 0f       	add	r28, r30
    33aa:	d1 1d       	adc	r29, r1
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	ed 01       	movw	r28, r26
    33b8:	08 95       	ret

000033ba <itoa>:
    33ba:	fb 01       	movw	r30, r22
    33bc:	9f 01       	movw	r18, r30
    33be:	e8 94       	clt
    33c0:	42 30       	cpi	r20, 0x02	; 2
    33c2:	c4 f0       	brlt	.+48     	; 0x33f4 <itoa+0x3a>
    33c4:	45 32       	cpi	r20, 0x25	; 37
    33c6:	b4 f4       	brge	.+44     	; 0x33f4 <itoa+0x3a>
    33c8:	4a 30       	cpi	r20, 0x0A	; 10
    33ca:	29 f4       	brne	.+10     	; 0x33d6 <itoa+0x1c>
    33cc:	97 fb       	bst	r25, 7
    33ce:	1e f4       	brtc	.+6      	; 0x33d6 <itoa+0x1c>
    33d0:	90 95       	com	r25
    33d2:	81 95       	neg	r24
    33d4:	9f 4f       	sbci	r25, 0xFF	; 255
    33d6:	64 2f       	mov	r22, r20
    33d8:	77 27       	eor	r23, r23
    33da:	0e 94 0e 1a 	call	0x341c	; 0x341c <__udivmodhi4>
    33de:	80 5d       	subi	r24, 0xD0	; 208
    33e0:	8a 33       	cpi	r24, 0x3A	; 58
    33e2:	0c f0       	brlt	.+2      	; 0x33e6 <itoa+0x2c>
    33e4:	89 5d       	subi	r24, 0xD9	; 217
    33e6:	81 93       	st	Z+, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	a1 f7       	brne	.-24     	; 0x33d6 <itoa+0x1c>
    33ee:	16 f4       	brtc	.+4      	; 0x33f4 <itoa+0x3a>
    33f0:	5d e2       	ldi	r21, 0x2D	; 45
    33f2:	51 93       	st	Z+, r21
    33f4:	10 82       	st	Z, r1
    33f6:	c9 01       	movw	r24, r18
    33f8:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <strrev>

000033fc <strrev>:
    33fc:	dc 01       	movw	r26, r24
    33fe:	fc 01       	movw	r30, r24
    3400:	67 2f       	mov	r22, r23
    3402:	71 91       	ld	r23, Z+
    3404:	77 23       	and	r23, r23
    3406:	e1 f7       	brne	.-8      	; 0x3400 <strrev+0x4>
    3408:	32 97       	sbiw	r30, 0x02	; 2
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <strrev+0x18>
    340c:	7c 91       	ld	r23, X
    340e:	6d 93       	st	X+, r22
    3410:	70 83       	st	Z, r23
    3412:	62 91       	ld	r22, -Z
    3414:	ae 17       	cp	r26, r30
    3416:	bf 07       	cpc	r27, r31
    3418:	c8 f3       	brcs	.-14     	; 0x340c <strrev+0x10>
    341a:	08 95       	ret

0000341c <__udivmodhi4>:
    341c:	aa 1b       	sub	r26, r26
    341e:	bb 1b       	sub	r27, r27
    3420:	51 e1       	ldi	r21, 0x11	; 17
    3422:	07 c0       	rjmp	.+14     	; 0x3432 <__udivmodhi4_ep>

00003424 <__udivmodhi4_loop>:
    3424:	aa 1f       	adc	r26, r26
    3426:	bb 1f       	adc	r27, r27
    3428:	a6 17       	cp	r26, r22
    342a:	b7 07       	cpc	r27, r23
    342c:	10 f0       	brcs	.+4      	; 0x3432 <__udivmodhi4_ep>
    342e:	a6 1b       	sub	r26, r22
    3430:	b7 0b       	sbc	r27, r23

00003432 <__udivmodhi4_ep>:
    3432:	88 1f       	adc	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	5a 95       	dec	r21
    3438:	a9 f7       	brne	.-22     	; 0x3424 <__udivmodhi4_loop>
    343a:	80 95       	com	r24
    343c:	90 95       	com	r25
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	08 95       	ret

00003444 <_exit>:
    3444:	f8 94       	cli

00003446 <__stop_program>:
    3446:	ff cf       	rjmp	.-2      	; 0x3446 <__stop_program>
